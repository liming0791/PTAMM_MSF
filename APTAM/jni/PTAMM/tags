!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARDriver	ARDriver.cc	/^    ARDriver::ARDriver(const ATANCamera &cam, ImageRef irFrameSize, GLWindow2 &glw, Map &map)$/;"	f	class:PTAMM::ARDriver
ARDriver	ARDriver.h	/^class ARDriver$/;"	c	namespace:PTAMM
ATANCamera	ATANCamera.cc	/^ATANCamera::ATANCamera(string sName)$/;"	f	class:PTAMM::ATANCamera
ATANCamera	ATANCamera.cc	/^ATANCamera::ATANCamera(string sName, ImageRef irSize, Vector<NUMTRACKERCAMPARAMETERS> vParams)$/;"	f	class:PTAMM::ATANCamera
ATANCamera	ATANCamera.h	/^class ATANCamera$/;"	c	namespace:PTAMM
Accept	tinyxml.cc	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlComment
Accept	tinyxml.cc	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlDeclaration
Accept	tinyxml.cc	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlDocument
Accept	tinyxml.cc	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlElement
Accept	tinyxml.cc	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlText
Accept	tinyxml.cc	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:PTAMM::TiXmlUnknown
Action	MGButton.cc	/^void MGButton::Action( ModelsGameData & data )$/;"	f	class:PTAMM::MGButton
ActionCallback	MGButton.h	/^    typedef void (*ActionCallback)( ModelsGameData & data );$/;"	t	class:PTAMM::MGButton
Add	tinyxml.cc	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:PTAMM::TiXmlAttributeSet
AddCamera	Bundle.cc	/^int Bundle::AddCamera(SE3<> se3CamFromWorld, bool bFixed)$/;"	f	class:PTAMM::Bundle
AddKeyFrame	MapMaker.cc	/^    void MapMaker::AddKeyFrame(KeyFrame &k)$/;"	f	class:PTAMM::MapMaker
AddKeyFrameFromTopOfQueue	MapMaker.cc	/^    void MapMaker::AddKeyFrameFromTopOfQueue()$/;"	f	class:PTAMM::MapMaker
AddMeas	Bundle.cc	/^void Bundle::AddMeas(int nCam, int nPoint, Vector<2> v2Pos, double dSigmaSquared, Matrix<2> m2CamDerivs)$/;"	f	class:PTAMM::Bundle
AddMenu	GLWindow2.cc	/^void GLWindow2::AddMenu(string sName, string sTitle)$/;"	f	class:PTAMM::GLWindow2
AddModel	ModelsGameData.cc	/^bool ModelsGameData::AddModel( std::string sModelDir, std::string sFileName, std::string sName, TooN::Vector<3> v3Rotation )$/;"	f	class:PTAMM::ModelsGameData
AddModel_cb	ModelControls.cc	/^void AddModel_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
AddNewKeyFrame	Tracker.cc	/^    void Tracker::AddNewKeyFrame()$/;"	f	class:PTAMM::Tracker
AddPage	ModelBrowser.h	/^    void AddPage( Page * p ) { if( p ) vPages.push_back( p ); }$/;"	f	class:PTAMM::Pages
AddPoint	Bundle.cc	/^int Bundle::AddPoint(Vector<3> v3Pos)$/;"	f	class:PTAMM::Bundle
AddPointEpipolar	MapMaker.cc	/^    bool MapMaker::AddPointEpipolar(KeyFrame &kSrc, $/;"	f	class:PTAMM::MapMaker
AddSomeMapPoints	MapMaker.cc	/^    void MapMaker::AddSomeMapPoints(int* levels)$/;"	f	class:PTAMM::MapMaker
Advance	Game.h	/^    virtual void Advance() {}                                                        \/\/\/ Advance the game logic$/;"	f	class:PTAMM::Game
Advance	ShooterGame.cc	/^void ShooterGame::Advance()$/;"	f	class:PTAMM::ShooterGame
AdvanceLogic	ARDriver.cc	/^    void ARDriver::AdvanceLogic()$/;"	f	class:PTAMM::ARDriver
ApplyGlobalScaleToMap	MapMaker.cc	/^    void MapMaker::ApplyGlobalScaleToMap(double dScale)$/;"	f	class:PTAMM::MapMaker
ApplyGlobalTransformationToMap	MapMaker.cc	/^    void MapMaker::ApplyGlobalTransformationToMap(SE3<> se3NewFromOld)$/;"	f	class:PTAMM::MapMaker
ApplyIMUModel	Tracker.cc	/^    void Tracker::ApplyIMUModel()$/;"	f	class:PTAMM::Tracker
ApplyMotionModel	Tracker.cc	/^    void Tracker::ApplyMotionModel()$/;"	f	class:PTAMM::Tracker
AssessTrackingQuality	Tracker.cc	/^    void Tracker::AssessTrackingQuality()$/;"	f	class:PTAMM::Tracker
AttemptRecovery	Relocaliser.cc	/^bool Relocaliser::AttemptRecovery(Map & currentMap, KeyFrame &kCurrent)$/;"	f	class:PTAMM::Relocaliser
AttemptRecovery	Tracker.cc	/^    bool Tracker::AttemptRecovery()$/;"	f	class:PTAMM::Tracker
Attribute	tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:PTAMM::TiXmlElement
Attribute	tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:PTAMM::TiXmlElement
Attribute	tinyxml.cc	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:PTAMM::TiXmlElement
Attribute	tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:PTAMM::TiXmlElement
Attribute	tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:PTAMM::TiXmlElement
Attribute	tinyxml.cc	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:PTAMM::TiXmlElement
BAD	Tracker.h	/^  enum {BAD, DODGY, GOOD} mTrackingQuality;$/;"	e	enum:PTAMM::Tracker::__anon7
BROWSER_BUTTON_H	ModelBrowser.h	39;"	d
BROWSER_BUTTON_SEP	ModelBrowser.h	42;"	d
BROWSER_BUTTON_W	ModelBrowser.h	38;"	d
BROWSER_BUTTON_X	ModelBrowser.h	40;"	d
BROWSER_BUTTON_Y	ModelBrowser.h	41;"	d
BROWSER_FONT_H	ModelBrowser.h	48;"	d
BROWSER_FONT_X	ModelBrowser.h	47;"	d
BROWSER_ICON_H	ModelBrowser.h	46;"	d
BROWSER_ICON_W	ModelBrowser.h	45;"	d
BROWSER_ITEM_SEP	ModelBrowser.h	51;"	d
BROWSER_ITEM_W	ModelBrowser.h	53;"	d
BROWSER_ITEM_X	ModelBrowser.h	49;"	d
BROWSER_ITEM_Y	ModelBrowser.h	50;"	d
BROWSER_TOTAL_ITEM_HEIGHT	ModelBrowser.h	52;"	d
BROWSER_X	ModelBrowser.h	34;"	d
BROWSER_Y	ModelBrowser.h	35;"	d
BestHomographyFromMatches_MLESAC	HomographyInit.cc	/^void HomographyInit::BestHomographyFromMatches_MLESAC()$/;"	f	class:PTAMM::HomographyInit
BestPose	Relocaliser.cc	/^SE3<> Relocaliser::BestPose()$/;"	f	class:PTAMM::Relocaliser
Blank	tinyxmlparser.cc	/^bool TiXmlText::Blank() const$/;"	f	class:PTAMM::TiXmlText
BrowserItem	ModelBrowser.cc	/^BrowserItem::BrowserItem()$/;"	f	class:PTAMM::BrowserItem
BrowserItem	ModelBrowser.h	/^class BrowserItem$/;"	c	namespace:PTAMM
BrowserState	ModelsGameData.h	/^    enum DisplayState {BrowserState, ControlState, HiddenState};$/;"	e	enum:PTAMM::ModelsGameData::DisplayState
Bullet	ShooterGame.h	/^    Bullet() : dVelocity(0.01), nStrength(100), nDamage(20) {}$/;"	f	struct:PTAMM::Bullet
Bullet	ShooterGame.h	/^struct Bullet {$/;"	s	namespace:PTAMM
Bundle	Bundle.cc	/^Bundle::Bundle()$/;"	f	class:PTAMM::Bundle
Bundle	Bundle.h	/^class Bundle$/;"	c	namespace:PTAMM
BundleAdjust	MapMaker.cc	/^    void MapMaker::BundleAdjust(set<KeyFrame*> sAdjustSet, set<KeyFrame*> sFixedSet, set<MapPoint*> sMapPoints, bool bRecent)$/;"	f	class:PTAMM::MapMaker
BundleAdjustAll	MapMaker.cc	/^    void MapMaker::BundleAdjustAll()$/;"	f	class:PTAMM::MapMaker
BundleAdjustRecent	MapMaker.cc	/^    void MapMaker::BundleAdjustRecent()$/;"	f	class:PTAMM::MapMaker
BundleTriangle_UpdateM3V_LL	Bundle.cc	/^inline void BundleTriangle_UpdateM3V_LL(Matrix<3> &m3V, Matrix<2,3> &m23B)$/;"	f	namespace:PTAMM
BundleTriangle_UpdateM6U_LL	Bundle.cc	/^inline void BundleTriangle_UpdateM6U_LL(Matrix<6> &m6U, Matrix<2,6> &m26A)$/;"	f	namespace:PTAMM
Button	GLWindowMenu.h	/^  enum MenuItemType { Button, Toggle, Monitor, Slider };$/;"	e	enum:PTAMM::GLWindowMenu::MenuItemType
CANCEL	ModelBrowser.h	/^    enum CLICK_STATUS { OK, NONE, CANCEL, MODEL };$/;"	e	enum:PTAMM::ModelBrowser::CLICK_STATUS
CDATA	tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:PTAMM::TiXmlText
CHECK_REINIT	MapMaker.cc	135;"	d	file:
CHECK_RESET	MapMaker.cc	133;"	d	file:
CHECK_SWITCH	MapMaker.cc	136;"	d	file:
CHECK_UNLOCK	MapMaker.cc	137;"	d	file:
CKECK_ABORTS	MapMaker.cc	139;"	d	file:
CLICK_STATUS	ModelBrowser.h	/^    enum CLICK_STATUS { OK, NONE, CANCEL, MODEL };$/;"	g	class:PTAMM::ModelBrowser
COMMENT	tinyxml.h	/^		COMMENT,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
CStr	tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:PTAMM::TiXmlPrinter
CalcJacobian	TrackerData.h	/^  inline void CalcJacobian()$/;"	f	struct:PTAMM::TrackerData
CalcPlaneAligner	MapMaker.cc	/^    SE3<> MapMaker::CalcPlaneAligner()$/;"	f	class:PTAMM::MapMaker
CalcPoseUpdate	Tracker.cc	/^    Vector<6> Tracker::CalcPoseUpdate(vector<TrackerData*> vTD, double dOverrideSigma, bool bMarkOutliers)$/;"	f	class:PTAMM::Tracker
CalcSBIRotation	Tracker.cc	/^    void Tracker::CalcSBIRotation()$/;"	f	class:PTAMM::Tracker
CalcSearchLevelAndWarpMatrix	PatchFinder.cc	/^int PatchFinder::CalcSearchLevelAndWarpMatrix(MapPoint &p,$/;"	f	class:PTAMM::PatchFinder
CalibCornerPatch	CalibCornerPatch.cc	/^CalibCornerPatch::CalibCornerPatch(int nSideSize)$/;"	f	class:PTAMM::CalibCornerPatch
CalibCornerPatch	CalibCornerPatch.h	/^class CalibCornerPatch$/;"	c	namespace:PTAMM
CalibGridCorner	CalibImage.h	/^struct CalibGridCorner$/;"	s	namespace:PTAMM
CalibImage	CalibImage.h	/^class CalibImage$/;"	c	namespace:PTAMM
Camera	Bundle.h	/^struct Camera$/;"	s	namespace:PTAMM
Camera	KeyFrame.h	/^    ATANCamera Camera;                                        \/\/ The camera model which this KF came from$/;"	m	class:PTAMM::KeyFrame
CameraCalibrator	CameraCalibrator.cc	/^CameraCalibrator::CameraCalibrator()$/;"	f	class:CameraCalibrator
CameraCalibrator	CameraCalibrator.h	/^class CameraCalibrator$/;"	c	namespace:PTAMM
Candidate	KeyFrame.h	/^struct Candidate$/;"	s	namespace:PTAMM
CategoryData	ModelBrowser.h	/^struct CategoryData$/;"	s	namespace:PTAMM
CategoryItem	ModelBrowser.h	/^    CategoryItem( Pages * pParent ) : pages(pParent) {};$/;"	f	class:PTAMM::CategoryItem
CategoryItem	ModelBrowser.h	/^class CategoryItem : public BrowserItem$/;"	c	namespace:PTAMM
Cauchy	MEstimator.h	/^struct Cauchy$/;"	s	namespace:PTAMM
CheckFramebufferStatus	ARDriver.cc	/^    static bool CheckFramebufferStatus()$/;"	f	namespace:PTAMM
CheckGLError	OpenGL.h	/^inline void CheckGLError(const char* prefix)$/;"	f
CheckLockAndWait	MapLockManager.cc	/^bool MapLockManager::CheckLockAndWait( void * t, int nTimeout)$/;"	f	class:PTAMM::MapLockManager
Child	tinyxml.cc	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:PTAMM::TiXmlHandle
Child	tinyxml.cc	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:PTAMM::TiXmlHandle
Child	tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:PTAMM::TiXmlHandle
ChildElement	tinyxml.cc	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:PTAMM::TiXmlHandle
ChildElement	tinyxml.cc	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:PTAMM::TiXmlHandle
ChildElement	tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:PTAMM::TiXmlHandle
ChooseBestDecomposition	HomographyInit.cc	/^void HomographyInit::ChooseBestDecomposition()$/;"	f	class:PTAMM::HomographyInit
Clear	tinyxml.cc	/^void TiXmlNode::Clear()$/;"	f	class:PTAMM::TiXmlNode
Clear	tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:PTAMM::TiXmlCursor
ClearAccumulators	Bundle.cc	/^void Bundle::ClearAccumulators()$/;"	f	class:PTAMM::Bundle
ClearError	tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:PTAMM::TiXmlDocument
ClearThis	tinyxml.cc	/^void TiXmlElement::ClearThis()$/;"	f	class:PTAMM::TiXmlElement
Clone	tinyxml.cc	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:PTAMM::TiXmlComment
Clone	tinyxml.cc	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:PTAMM::TiXmlDeclaration
Clone	tinyxml.cc	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:PTAMM::TiXmlDocument
Clone	tinyxml.cc	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:PTAMM::TiXmlElement
Clone	tinyxml.cc	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:PTAMM::TiXmlText
Clone	tinyxml.cc	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:PTAMM::TiXmlUnknown
ClosestKeyFrame	MapMaker.cc	/^    KeyFrame* MapMaker::ClosestKeyFrame(KeyFrame &k)$/;"	f	class:PTAMM::MapMaker
Column	tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:PTAMM::TiXmlBase
Command	MapMaker.h	/^    struct Command {std::string sCommand; std::string sParams; };$/;"	s	class:PTAMM::MapMaker
Command	Tracker.h	/^  struct Command {std::string sCommand; std::string sParams; };$/;"	s	class:PTAMM::Tracker
Compute	Bundle.cc	/^int Bundle::Compute(bool *pbAbortSignal)$/;"	f	class:PTAMM::Bundle
Compute	HomographyInit.cc	/^bool HomographyInit::Compute(vector<HomographyMatch> vMatches, double dMaxPixelError, SE3<> &se3SecondFromFirst)$/;"	f	class:PTAMM::HomographyInit
ControlState	ModelsGameData.h	/^    enum DisplayState {BrowserState, ControlState, HiddenState};$/;"	e	enum:PTAMM::ModelsGameData::DisplayState
Converged	Bundle.h	/^  inline bool Converged() { return mbConverged;}  \/\/ Has bundle adjustment converged?$/;"	f	class:PTAMM::Bundle
ConvertUTF32ToUTF8	tinyxmlparser.cc	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:PTAMM::TiXmlBase
CopyTo	tinyxml.cc	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:PTAMM::TiXmlComment
CopyTo	tinyxml.cc	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:PTAMM::TiXmlDeclaration
CopyTo	tinyxml.cc	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:PTAMM::TiXmlDocument
CopyTo	tinyxml.cc	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:PTAMM::TiXmlElement
CopyTo	tinyxml.cc	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:PTAMM::TiXmlNode
CopyTo	tinyxml.cc	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:PTAMM::TiXmlText
CopyTo	tinyxml.cc	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:PTAMM::TiXmlUnknown
CurrentModel	ModelsGameData.cc	/^Model3DS * ModelsGameData::CurrentModel()$/;"	f	class:PTAMM::ModelsGameData
CurrentPage	ModelBrowser.h	/^    const Page & CurrentPage() { return *vPages[nIndex]; }$/;"	f	class:PTAMM::Pages
Cursor	tinyxmlparser.cc	/^	const TiXmlCursor& Cursor()	{ return cursor; }$/;"	f	class:PTAMM::TiXmlParsingData
DEBUG	tinyxml.h	44;"	d
DECLARATION	tinyxml.h	/^		DECLARATION,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
DOCUMENT	tinyxml.h	/^		DOCUMENT,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
DODGY	Tracker.h	/^  enum {BAD, DODGY, GOOD} mTrackingQuality;$/;"	e	enum:PTAMM::Tracker::__anon7
Decode	MD5.cc	/^void MD5::Decode (unsigned long int *output, const unsigned char *input, unsigned int len)$/;"	f	class:PTAMM::MD5
DecomposeHomography	HomographyInit.cc	/^void HomographyInit::DecomposeHomography()$/;"	f	class:PTAMM::HomographyInit
DeleteAllModels	ModelsGameData.cc	/^void ModelsGameData::DeleteAllModels()$/;"	f	class:PTAMM::ModelsGameData
DeleteAllModels_cb	ModelControls.cc	/^void DeleteAllModels_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
DeleteCurrentModel	ModelsGameData.cc	/^void ModelsGameData::DeleteCurrentModel()$/;"	f	class:PTAMM::ModelsGameData
DeleteCurrentModel_cb	ModelControls.cc	/^void DeleteCurrentModel_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
DeleteMap	System.cc	/^bool System::DeleteMap( int nMapNum )$/;"	f	class:PTAMM::System
Diameter	Model3ds.h	/^    double Diameter() { return 3*mdScale*mdDiameter; }$/;"	f	class:PTAMM::Model3DS
DisableRadialDistortion	ATANCamera.cc	/^void ATANCamera::DisableRadialDistortion()$/;"	f	class:PTAMM::ATANCamera
DisplayState	ModelsGameData.h	/^    enum DisplayState {BrowserState, ControlState, HiddenState};$/;"	g	class:PTAMM::ModelsGameData
DistToNearestKeyFrame	MapMaker.cc	/^    double MapMaker::DistToNearestKeyFrame(KeyFrame &kCurrent)$/;"	f	class:PTAMM::MapMaker
DistortionVertex	ARDriver.cc	/^    struct DistortionVertex$/;"	s	namespace:PTAMM	file:
DoIndent	tinyxml.h	/^	void DoIndent()	{$/;"	f	class:PTAMM::TiXmlPrinter
DoLineBreak	tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:PTAMM::TiXmlPrinter
Do_LM_Step	Bundle.cc	/^bool Bundle::Do_LM_Step(bool *pbAbortSignal)$/;"	f	class:PTAMM::Bundle
DoubleValue	tinyxml.cc	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:PTAMM::TiXmlAttribute
Draw	CalibImage.cc	/^void CalibGridCorner::Draw()$/;"	f	class:PTAMM::CalibGridCorner
Draw	MGButton.cc	/^void MGButton::Draw()$/;"	f	class:PTAMM::MGButton
Draw	Model3ds.cc	/^void Model3DS::Draw()$/;"	f	class:PTAMM::Model3DS
Draw	ModelBrowser.cc	/^void BrowserItem::Draw( const GLWindow2 & glWin )$/;"	f	class:PTAMM::BrowserItem
Draw	ModelBrowser.cc	/^void ModelBrowser::Draw(  const GLWindow2 &glWindow )$/;"	f	class:PTAMM::ModelBrowser
Draw	ModelControls.cc	/^void ModelControls::Draw( const GLWindow2 &glWindow )$/;"	f	class:PTAMM::ModelControls
Draw	ShooterGameTarget.cc	/^void ShooterGameTarget::Draw()$/;"	f	class:PTAMM::ShooterGameTarget
Draw2D	Game.h	/^    virtual void Draw2D(const GLWindow2 &glWindow, Map &map) {}                      \/\/\/ draw any 2D overlays needed.$/;"	f	class:PTAMM::Game
Draw2D	ModelsGame.cc	/^void ModelsGame::Draw2D( const GLWindow2 &glWindow, Map &map)$/;"	f	class:PTAMM::ModelsGame
Draw2D	ShooterGame.cc	/^void ShooterGame::Draw2D( const GLWindow2 &glWindow, Map &map)$/;"	f	class:PTAMM::ShooterGame
Draw3D	EyeGame.cc	/^void EyeGame::Draw3D( const GLWindow2 &glWindow, Map &map, SE3<> se3CfromW)$/;"	f	class:PTAMM::EyeGame
Draw3D	ModelsGame.cc	/^void ModelsGame::Draw3D( const GLWindow2 &glWindow, Map &map, SE3<> se3CfromW)$/;"	f	class:PTAMM::ModelsGame
Draw3D	ShooterGame.cc	/^void ShooterGame::Draw3D( const GLWindow2 &glWindow, Map &map, SE3<> se3CfromW)$/;"	f	class:PTAMM::ShooterGame
Draw3DGrid	CalibImage.cc	/^void CalibImage::Draw3DGrid(ATANCamera &Camera, bool bDrawErrors)$/;"	f	class:PTAMM::CalibImage
DrawBox	GLWindow2.cc	/^const void GLWindow2::DrawBox(int x, int y, int w, int nLines, float fAlpha) const$/;"	f	class:PTAMM::GLWindow2
DrawCamera	MapViewer.cc	/^void MapViewer::DrawCamera(SE3<> se3CfromW, bool bSmall)$/;"	f	class:PTAMM::MapViewer
DrawCaption	GLWindow2.cc	/^void GLWindow2::DrawCaption(string s)$/;"	f	class:PTAMM::GLWindow2
DrawDistortedFB	ARDriver.cc	/^    void ARDriver::DrawDistortedFB()$/;"	f	class:PTAMM::ARDriver
DrawEye	EyeGame.cc	/^void EyeGame::DrawEye()$/;"	f	class:PTAMM::EyeGame
DrawFBBackGround	ARDriver.cc	/^    void ARDriver::DrawFBBackGround()$/;"	f	class:PTAMM::ARDriver
DrawFadingGrid	ARDriver.cc	/^    void ARDriver::DrawFadingGrid()$/;"	f	class:PTAMM::ARDriver
DrawGrid	MapViewer.cc	/^void MapViewer::DrawGrid()$/;"	f	class:PTAMM::MapViewer
DrawImageGrid	CalibImage.cc	/^void CalibImage::DrawImageGrid()$/;"	f	class:PTAMM::CalibImage
DrawMap	MapViewer.cc	/^void MapViewer::DrawMap(SE3<> se3CamFromWorld)$/;"	f	class:PTAMM::MapViewer
DrawMapDots	MapViewer.cc	/^void MapViewer::DrawMapDots()$/;"	f	class:PTAMM::MapViewer
DrawMapInfo	System.cc	/^void System::DrawMapInfo()$/;"	f	class:PTAMM::System
DrawMenus	GLWindow2.cc	/^void GLWindow2::DrawMenus()$/;"	f	class:PTAMM::GLWindow2
ELEMENT	tinyxml.h	/^		ELEMENT,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
Element	tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:PTAMM::TiXmlHandle
EmptyTrash	Map.cc	/^void Map::EmptyTrash()$/;"	f	class:PTAMM::Map
Encode	MD5.cc	/^void MD5::Encode (unsigned char *output, unsigned long int *input, unsigned int len)$/;"	f	class:PTAMM::MD5
EncodeString	tinyxml.cc	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:PTAMM::TiXmlBase
Encoding	tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:PTAMM::TiXmlDeclaration
Entity	tinyxml.h	/^	struct Entity$/;"	s	class:PTAMM::TiXmlBase
Error	tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:PTAMM::TiXmlDocument
ErrorAndJacobians	CalibImage.h	/^  struct ErrorAndJacobians$/;"	s	class:PTAMM::CalibImage
ErrorCol	tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:PTAMM::TiXmlDocument
ErrorDesc	tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:PTAMM::TiXmlDocument
ErrorId	tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:PTAMM::TiXmlDocument
ErrorRow	tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:PTAMM::TiXmlDocument
ExpandByAngle	CalibImage.cc	/^bool CalibImage::ExpandByAngle(int nSrc, int nDirn)$/;"	f	class:PTAMM::CalibImage
ExpandByStep	CalibImage.cc	/^void CalibImage::ExpandByStep(int n)$/;"	f	class:PTAMM::CalibImage
ExpansionPotential	CalibImage.cc	/^double CalibGridCorner::ExpansionPotential()$/;"	f	class:PTAMM::CalibGridCorner
EyeGame	EyeGame.cc	/^EyeGame::EyeGame()$/;"	f	class:PTAMM::EyeGame
EyeGame	EyeGame.h	/^class EyeGame : public Game$/;"	c	namespace:PTAMM
F	MD5.cc	65;"	d	file:
FF	MD5.cc	77;"	d	file:
FillBox	GLWindowMenu.cc	/^void GLWindowMenu::FillBox(int l, int r, int t, int b)$/;"	f	class:PTAMM::GLWindowMenu
Find	tinyxml.cc	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:PTAMM::TiXmlAttributeSet
Find	tinyxml.cc	/^const TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:PTAMM::TiXmlAttributeSet
Find	tinyxml.h	/^	TiXmlAttribute*	Find( const char* _name ) {$/;"	f	class:PTAMM::TiXmlAttributeSet
Find	tinyxml.h	/^	TiXmlAttribute*	Find( const std::string& _name ) {$/;"	f	class:PTAMM::TiXmlAttributeSet
FindNewError	Bundle.cc	/^double Bundle::FindNewError()$/;"	f	class:PTAMM::Bundle
FindPatch	MiniPatch.cc	/^bool MiniPatch::FindPatch(CVD::ImageRef &irPos, $/;"	f	class:PTAMM::MiniPatch
FindPatchCoarse	PatchFinder.cc	/^bool PatchFinder::FindPatchCoarse(ImageRef irPos, KeyFrame &kf, unsigned int nRange)$/;"	f	class:PTAMM::PatchFinder
FindShiTomasiScoreAtPoint	ShiTomasi.cc	/^double FindShiTomasiScoreAtPoint(BasicImage<CVD::byte> &image,$/;"	f	namespace:PTAMM
FindSigmaSquared	MEstimator.h	/^inline double Cauchy::FindSigmaSquared(std::vector<double> &vdErrorSquared)$/;"	f	class:PTAMM::Cauchy
FindSigmaSquared	MEstimator.h	/^inline double Huber::FindSigmaSquared(std::vector<double> &vdErrorSquared)$/;"	f	class:PTAMM::Huber
FindSigmaSquared	MEstimator.h	/^inline double LeastSquares::FindSigmaSquared(std::vector<double> &vdErrorSquared)$/;"	f	class:PTAMM::LeastSquares
FindSigmaSquared	MEstimator.h	/^inline double Tukey::FindSigmaSquared(std::vector<double> &vdErrorSquared)$/;"	f	class:PTAMM::Tukey
Finder	TrackerData.h	/^  PatchFinder Finder;$/;"	m	struct:PTAMM::TrackerData
First	tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:PTAMM::TiXmlAttributeSet
First	tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:PTAMM::TiXmlAttributeSet
FirstAttribute	tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:PTAMM::TiXmlElement
FirstAttribute	tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:PTAMM::TiXmlElement
FirstChild	tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:PTAMM::TiXmlHandle
FirstChild	tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:PTAMM::TiXmlHandle
FirstChild	tinyxml.cc	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:PTAMM::TiXmlNode
FirstChild	tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:PTAMM::TiXmlHandle
FirstChild	tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:PTAMM::TiXmlNode
FirstChild	tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
FirstChild	tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:PTAMM::TiXmlNode
FirstChild	tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
FirstChild	tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:PTAMM::TiXmlHandle
FirstChildElement	tinyxml.cc	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:PTAMM::TiXmlHandle
FirstChildElement	tinyxml.cc	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.cc	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:PTAMM::TiXmlNode
FirstChildElement	tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:PTAMM::TiXmlHandle
FirstChildElement	tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
ForceRecovery	Tracker.h	/^  void ForceRecovery() { if(mnLostFrames < NUM_LOST_FRAMES) mnLostFrames = NUM_LOST_FRAMES; }$/;"	f	class:PTAMM::Tracker
G	MD5.cc	66;"	d	file:
GG	MD5.cc	83;"	d	file:
GLWindow2	GLWindow2.cc	/^GLWindow2::GLWindow2(ImageRef irSize, string sTitle)$/;"	f	class:PTAMM::GLWindow2
GLWindow2	GLWindow2.h	/^class GLWindow2$/;"	c	namespace:PTAMM
GLWindowMenu	GLWindowMenu.cc	/^GLWindowMenu::GLWindowMenu(string sName, string sTitle)$/;"	f	class:PTAMM::GLWindowMenu
GLWindowMenu	GLWindowMenu.h	/^class GLWindowMenu$/;"	c	namespace:PTAMM
GL_GLEXT_PROTOTYPES	ARDriver.cc	2;"	d	file:
GOOD	Tracker.h	/^  enum {BAD, DODGY, GOOD} mTrackingQuality;$/;"	e	enum:PTAMM::Tracker::__anon7
GUICommandCallBack	CameraCalibrator.cc	/^void CameraCalibrator::GUICommandCallBack(void* ptr, string sCommand, string sParams)$/;"	f	class:CameraCalibrator
GUICommandCallBack	GLWindow2.cc	/^void GLWindow2::GUICommandCallBack(void* ptr, string sCommand, string sParams)$/;"	f	class:PTAMM::GLWindow2
GUICommandCallBack	GLWindowMenu.cc	/^void GLWindowMenu::GUICommandCallBack(void *ptr, string sCommand, string sParams)$/;"	f	class:PTAMM::GLWindowMenu
GUICommandCallBack	MapMaker.cc	/^    void MapMaker::GUICommandCallBack(void* ptr, string sCommand, string sParams)$/;"	f	class:PTAMM::MapMaker
GUICommandCallBack	System.cc	/^void System::GUICommandCallBack(void *ptr, string sCommand, string sParams)$/;"	f	class:PTAMM::System
GUICommandCallBack	Tracker.cc	/^    void Tracker::GUICommandCallBack(void* ptr, string sCommand, string sParams)$/;"	f	class:PTAMM::Tracker
GUICommandHandler	CameraCalibrator.cc	/^void CameraCalibrator::GUICommandHandler(string sCommand, string sParams)  \/\/ Called by the callback func..$/;"	f	class:CameraCalibrator
GUICommandHandler	GLWindow2.cc	/^void GLWindow2::GUICommandHandler(string sCommand, string sParams)  \/\/ Called by the callback func..$/;"	f	class:PTAMM::GLWindow2
GUICommandHandler	GLWindowMenu.cc	/^void GLWindowMenu::GUICommandHandler(string sCommand, string sParams)$/;"	f	class:PTAMM::GLWindowMenu
GUICommandHandler	MapMaker.cc	/^    void MapMaker::GUICommandHandler(string sCommand, string sParams)  \/\/ Called by the callback func..$/;"	f	class:PTAMM::MapMaker
GUICommandHandler	Tracker.cc	/^    void Tracker::GUICommandHandler(string sCommand, string sParams)  \/\/ Called by the callback func..$/;"	f	class:PTAMM::Tracker
Game	Game.h	/^    Game( std::string sName ) : msName(sName), mbInitialised(false) {}$/;"	f	class:PTAMM::Game
Game	Game.h	/^class Game$/;"	c	namespace:PTAMM
GenerateMeasLUTs	Bundle.cc	/^void Bundle::GenerateMeasLUTs()$/;"	f	class:PTAMM::Bundle
GenerateOffDiagScripts	Bundle.cc	/^void Bundle::GenerateOffDiagScripts()$/;"	f	class:PTAMM::Bundle
GetAndFillFrameBWandRGB	VideoSource_Android.cc	/^void VideoSource::GetAndFillFrameBWandRGB(Image<byte> &imBW, Image<Rgb<byte> > &imRGB)$/;"	f	class:VideoSource
GetCamera	Bundle.cc	/^SE3<> Bundle::GetCamera(int n)$/;"	f	class:PTAMM::Bundle
GetCameraParameterDerivs	ATANCamera.cc	/^Matrix<2,NUMTRACKERCAMPARAMETERS> ATANCamera::GetCameraParameterDerivs()$/;"	f	class:PTAMM::ATANCamera
GetChar	tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlBase
GetCoarsePos	PatchFinder.h	/^  inline CVD::ImageRef GetCoarsePos() { return CVD::ImageRef((int) mv2CoarsePos[0], (int) mv2CoarsePos[1]);} $/;"	f	class:PTAMM::PatchFinder
GetCoarsePosAsVector	PatchFinder.h	/^  inline Vector<2> GetCoarsePosAsVector() { return mv2CoarsePos; }$/;"	f	class:PTAMM::PatchFinder
GetCov	PatchFinder.h	/^  inline Matrix<2> GetCov()$/;"	f	class:PTAMM::PatchFinder
GetCurrentPose	Tracker.h	/^  inline SE3<> GetCurrentPose() { return mse3CamFromWorld; }$/;"	f	class:PTAMM::Tracker
GetDerivsUnsafe	TrackerData.h	/^  inline void GetDerivsUnsafe(ATANCamera &Cam) $/;"	f	struct:PTAMM::TrackerData
GetDocument	tinyxml.cc	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:PTAMM::TiXmlNode
GetDocument	tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:PTAMM::TiXmlNode
GetEntity	tinyxmlparser.cc	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlBase
GetImageSize	ATANCamera.h	/^    inline Vector<2> GetImageSize() {return mvImageSize;};$/;"	f	class:PTAMM::ATANCamera
GetLevel	PatchFinder.h	/^  inline int GetLevel() { return mnSearchLevel; }$/;"	f	class:PTAMM::PatchFinder
GetLevelScale	PatchFinder.h	/^  inline int GetLevelScale() { return LevelScale(mnSearchLevel); }$/;"	f	class:PTAMM::PatchFinder
GetMessageForUser	MapViewer.cc	/^string MapViewer::GetMessageForUser()$/;"	f	class:PTAMM::MapViewer
GetMessageForUser	Tracker.cc	/^    string Tracker::GetMessageForUser()$/;"	f	class:PTAMM::Tracker
GetMousePoseUpdate	GLWindow2.cc	/^pair<Vector<6>, Vector<6> > GLWindow2::GetMousePoseUpdate()$/;"	f	class:PTAMM::GLWindow2
GetName	MGButton.h	/^    std::string GetName() { return msName; }              \/\/\/ The name of the button$/;"	f	class:PTAMM::MGButton
GetOutlierMeasurements	Bundle.cc	/^vector<pair<int, int> > Bundle::GetOutlierMeasurements()$/;"	f	class:PTAMM::Bundle
GetOutliers	Bundle.cc	/^set<int> Bundle::GetOutliers()$/;"	f	class:PTAMM::Bundle
GetParams	ATANCamera.h	/^    inline Vector<NUMTRACKERCAMPARAMETERS> GetParams()  { return *mgvvCameraParams; }$/;"	f	class:PTAMM::ATANCamera
GetPoint	Bundle.cc	/^Vector<3> Bundle::GetPoint(int n)$/;"	f	class:PTAMM::Bundle
GetPosition	MGButton.h	/^    CVD::ImageRef GetPosition() { return mirPosition; }   \/\/\/ The position of the button$/;"	f	class:PTAMM::MGButton
GetProjectionDerivs	ATANCamera.cc	/^Matrix<2,2> ATANCamera::GetProjectionDerivs()$/;"	f	class:PTAMM::ATANCamera
GetSelectedModelData	ModelBrowser.h	/^    const ModelData * GetSelectedModelData() { return mpSelectedModelData; }$/;"	f	class:PTAMM::ModelBrowser
GetSingleParam	System.cc	/^bool System::GetSingleParam(int &nAnswer, string sCommand, string sParams)$/;"	f	class:PTAMM::System
GetSize	MGButton.h	/^    CVD::ImageRef GetSize() { return mirSize; }           \/\/\/ The size of the button$/;"	f	class:PTAMM::MGButton
GetSteps	CalibImage.cc	/^Matrix<2> CalibGridCorner::GetSteps(vector<CalibGridCorner> &vgc)$/;"	f	class:PTAMM::CalibGridCorner
GetSubPixPos	PatchFinder.h	/^  inline Vector<2> GetSubPixPos()  { return mv2SubPixPos;   }  \/\/ Get result$/;"	f	class:PTAMM::PatchFinder
GetText	tinyxml.cc	/^const char* TiXmlElement::GetText() const$/;"	f	class:PTAMM::TiXmlElement
GetUserData	tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:PTAMM::TiXmlBase
GetUserData	tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:PTAMM::TiXmlBase
GoodMeasCount	MapPoint.h	/^  inline int GoodMeasCount()            $/;"	f	struct:PTAMM::MapMakerData
GuessInitialAngles	CalibImage.cc	/^Vector<2> GuessInitialAngles(Image<CVD::byte> &im, ImageRef irCenter)$/;"	f	namespace:PTAMM
GuessInitialPose	CalibImage.cc	/^void CalibImage::GuessInitialPose(ATANCamera &Camera)$/;"	f	class:PTAMM::CalibImage
H	MD5.cc	67;"	d	file:
HH	MD5.cc	88;"	d	file:
HandleBadPoints	MapMaker.cc	/^    void MapMaker::HandleBadPoints()$/;"	f	class:PTAMM::MapMaker
HandleClick	ARDriver.cc	/^    void ARDriver::HandleClick(int nButton, ImageRef irWin )$/;"	f	class:PTAMM::ARDriver
HandleClick	GLWindowMenu.cc	/^bool GLWindowMenu::HandleClick(int nMouseButton, int state, int x, int y)$/;"	f	class:PTAMM::GLWindowMenu
HandleClick	Game.h	/^    virtual void HandleClick(Vector<2> v2VidCoords, Vector<2> v2UFB, Vector<3> v3RayDirnW, $/;"	f	class:PTAMM::Game
HandleClick	ModelBrowser.cc	/^ModelBrowser::CLICK_STATUS ModelBrowser::HandleClick(Vector<2> v2VidCoords)$/;"	f	class:PTAMM::ModelBrowser
HandleClick	ModelControls.cc	/^bool ModelControls::HandleClick(Vector<2> v2VidCoords, int nButton)$/;"	f	class:PTAMM::ModelControls
HandleClick	ModelsGame.cc	/^void ModelsGame::HandleClick(Vector<2> v2VidCoords, Vector<2> v2UFB, Vector<3> v3RayDirnW, Vector<2> v2Plane, int nButton)$/;"	f	class:PTAMM::ModelsGame
HandleKeyPress	ARDriver.cc	/^    void ARDriver::HandleKeyPress( std::string sKey )$/;"	f	class:PTAMM::ARDriver
HandleKeyPress	Game.h	/^    virtual void HandleKeyPress( std::string sKey ) {}                               \/\/\/ Handle a key press$/;"	f	class:PTAMM::Game
HandleKeyPress	ShooterGame.cc	/^void ShooterGame::HandleKeyPress( std::string sKey )$/;"	f	class:PTAMM::ShooterGame
HandleKeyPress	Tracker.cc	/^    bool Tracker::HandleKeyPress( string sKey )$/;"	f	class:PTAMM::Tracker
HandlePendingEvents	GLWindow2.cc	/^void GLWindow2::HandlePendingEvents()$/;"	f	class:PTAMM::GLWindow2
HandlePressAndHold	ModelControls.cc	/^void ModelControls::HandlePressAndHold()$/;"	f	class:PTAMM::ModelControls
HiddenState	ModelsGameData.h	/^    enum DisplayState {BrowserState, ControlState, HiddenState};$/;"	e	enum:PTAMM::ModelsGameData::DisplayState
HitCheck	ShooterGameTarget.cc	/^bool ShooterGameTarget::HitCheck( Vector<3> v3Pos )$/;"	f	class:PTAMM::ShooterGameTarget
HomographyDecomposition	HomographyInit.h	/^struct HomographyDecomposition$/;"	s	namespace:PTAMM
HomographyFromMatches	HomographyInit.cc	/^Matrix<3> HomographyInit::HomographyFromMatches(vector<HomographyMatch> vMatches)$/;"	f	class:PTAMM::HomographyInit
HomographyInit	HomographyInit.h	/^class HomographyInit$/;"	c	namespace:PTAMM
HomographyMatch	HomographyInit.h	/^struct HomographyMatch$/;"	s	namespace:PTAMM
Huber	MEstimator.h	/^struct Huber$/;"	s	namespace:PTAMM
I	MD5.cc	68;"	d	file:
II	MD5.cc	93;"	d	file:
IR_from_dirn	CalibImage.cc	/^ImageRef CalibImage::IR_from_dirn(int nDirn)$/;"	f	class:PTAMM::CalibImage
Identify	tinyxmlparser.cc	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlNode
ImageSize	ATANCamera.h	/^    Vector<2> ImageSize() { return mvImageSize; }$/;"	f	class:PTAMM::ATANCamera
Indent	tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:PTAMM::TiXmlPrinter
Init	ARDriver.cc	/^    void ARDriver::Init()$/;"	f	class:PTAMM::ARDriver
Init	EyeGame.cc	/^void EyeGame::Init()$/;"	f	class:PTAMM::EyeGame
Init	MGButton.cc	/^void MGButton::Init( CVD::ImageRef irPosition, CVD::ImageRef irSize, ActionCallback action,$/;"	f	class:PTAMM::MGButton
Init	MapSerializer.cc	/^bool MapSerializer::Init( std::string sCommand, std::string sParams, Map &currentMap )$/;"	f	class:PTAMM::MapSerializer
Init	ModelBrowser.cc	/^bool ModelBrowser::Init( CVD::ImageRef irPosition, std::string sBrowserImageFileName)$/;"	f	class:PTAMM::ModelBrowser
Init	ModelControls.cc	/^void ModelControls::Init( )$/;"	f	class:PTAMM::ModelControls
Init	ModelsGame.cc	/^void ModelsGame::Init()$/;"	f	class:PTAMM::ModelsGame
Init	ShooterGame.cc	/^void ShooterGame::Init()$/;"	f	class:PTAMM::ShooterGame
InitFromStereo	MapMaker.cc	/^    bool MapMaker::InitFromStereo(KeyFrame &kF,$/;"	f	class:PTAMM::MapMaker
InitializeGameMenu	Games.cc	/^void InitializeGameMenu()$/;"	f	namespace:PTAMM
InsertAfterChild	tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:PTAMM::TiXmlNode
InsertBeforeChild	tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:PTAMM::TiXmlNode
InsertEndChild	tinyxml.cc	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:PTAMM::TiXmlNode
IntValue	tinyxml.cc	/^int TiXmlAttribute::IntValue() const$/;"	f	class:PTAMM::TiXmlAttribute
Invalid	ATANCamera.h	/^    inline bool Invalid() {  return mbInvalid;}$/;"	f	class:PTAMM::ATANCamera
IsAlpha	tinyxmlparser.cc	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:PTAMM::TiXmlBase
IsAlphaNum	tinyxmlparser.cc	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:PTAMM::TiXmlBase
IsCorner	CalibImage.cc	/^inline bool IsCorner(Image<CVD::byte> &im, ImageRef ir, int nGate)$/;"	f	namespace:PTAMM
IsDistanceToNearestKeyFrameExcessive	MapMaker.cc	/^    bool MapMaker::IsDistanceToNearestKeyFrameExcessive(KeyFrame &kCurrent)$/;"	f	class:PTAMM::MapMaker
IsGood	Map.h	/^    inline bool IsGood() {return bGood;}$/;"	f	class:PTAMM::Map
IsHomographyInlier	HomographyInit.cc	/^bool HomographyInit::IsHomographyInlier(Matrix<3> m3Homography, HomographyMatch match)$/;"	f	class:PTAMM::HomographyInit
IsLocked	MapLockManager.h	/^    bool IsLocked() { return mbLocked; }                  \/\/ check if map is locked$/;"	f	class:PTAMM::MapLockManager
IsLost	Tracker.h	/^  inline bool IsLost() { return (mnLostFrames > NUM_LOST_FRAMES); }$/;"	f	class:PTAMM::Tracker
IsMouseButtonPressed	GLWindow2.cc	/^const bool GLWindow2::IsMouseButtonPressed( const int button ) const$/;"	f	class:PTAMM::GLWindow2
IsMouseOver	MGButton.cc	/^bool MGButton::IsMouseOver( Vector<2> v2VidCoords )$/;"	f	class:PTAMM::MGButton
IsMouseOver	ModelBrowser.cc	/^bool BrowserItem::IsMouseOver( Vector<2> v2VidCoords )$/;"	f	class:PTAMM::BrowserItem
IsRegistered	MapLockManager.cc	/^bool MapLockManager::IsRegistered( void * t)$/;"	f	class:PTAMM::MapLockManager
IsRepeatEnabled	MGButton.h	/^    bool IsRepeatEnabled() { return mbEnableRepeat; }     \/\/\/ Is repeat action enabled$/;"	f	class:PTAMM::MGButton
IsToggle	MGButton.h	/^    bool IsToggle() { return mbToggle; }                  \/\/\/ Is it a toggle button$/;"	f	class:PTAMM::MGButton
IsWhiteSpace	tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:PTAMM::TiXmlBase
IsWhiteSpace	tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:PTAMM::TiXmlBase
IsWhiteSpaceCondensed	tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:PTAMM::TiXmlBase
Iterate	CalibCornerPatch.cc	/^double CalibCornerPatch::Iterate(Image<CVD::byte> &im)$/;"	f	class:PTAMM::CalibCornerPatch
IterateChildren	tinyxml.cc	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:PTAMM::TiXmlNode
IterateChildren	tinyxml.cc	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:PTAMM::TiXmlNode
IterateChildren	tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:PTAMM::TiXmlNode
IterateChildren	tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:PTAMM::TiXmlNode
IterateChildren	tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
IterateChildren	tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
IterateOnImage	CalibCornerPatch.cc	/^bool CalibCornerPatch::IterateOnImage(CalibCornerPatch::Params &params, Image<CVD::byte> &im)$/;"	f	class:PTAMM::CalibCornerPatch
IterateOnImageWithDrawing	CalibCornerPatch.cc	/^bool CalibCornerPatch::IterateOnImageWithDrawing(CalibCornerPatch::Params &params, Image<CVD::byte> &im)$/;"	f	class:PTAMM::CalibCornerPatch
IteratePosRelToTarget	SmallBlurryImage.cc	/^pair<SE2<>,double> SmallBlurryImage::IteratePosRelToTarget(SmallBlurryImage &other, int nIterations)$/;"	f	class:PTAMM::SmallBlurryImage
IterateSubPix	PatchFinder.cc	/^double PatchFinder::IterateSubPix(KeyFrame &kf)$/;"	f	class:PTAMM::PatchFinder
IterateSubPixToConvergence	PatchFinder.cc	/^bool PatchFinder::IterateSubPixToConvergence(KeyFrame &kf, int nMaxIts)$/;"	f	class:PTAMM::PatchFinder
Java_at_jku_ptam_PTAM_nativeClick	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeClick( JNIEnv* env, jobject thiz , jint x, jint y)$/;"	f
Java_at_jku_ptam_PTAM_nativeDestroy	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeDestroy( JNIEnv* env, jobject thiz )$/;"	f
Java_at_jku_ptam_PTAM_nativeFinish	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeFinish( JNIEnv* env, jobject thiz )$/;"	f
Java_at_jku_ptam_PTAM_nativeInit	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeInit( JNIEnv* env, jobject thiz , jboolean calib)$/;"	f
Java_at_jku_ptam_PTAM_nativeInitGL	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeInitGL( JNIEnv* env, jobject thiz )$/;"	f
Java_at_jku_ptam_PTAM_nativeKey	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeKey( JNIEnv* env, jobject thiz , jint keycode)$/;"	f
Java_at_jku_ptam_PTAM_nativeRender	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeRender( JNIEnv* env, jobject thiz, jfloatArray q )$/;"	f
Java_at_jku_ptam_PTAM_nativeResize	ptam-main.cc	/^Java_at_jku_ptam_PTAM_nativeResize( JNIEnv* env, jobject thiz , jint w, jint h)$/;"	f
KeyFrame	KeyFrame.cc	/^KeyFrame::KeyFrame(const ATANCamera &cam)$/;"	f	class:PTAMM::KeyFrame
KeyFrame	KeyFrame.cc	/^KeyFrame::KeyFrame(const KeyFrame &rhs)$/;"	f	class:PTAMM::KeyFrame
KeyFrame	KeyFrame.h	/^class KeyFrame$/;"	c	namespace:PTAMM
KeyFrameLinearDist	MapMaker.cc	/^    double MapMaker::KeyFrameLinearDist(KeyFrame &k1, KeyFrame &k2)$/;"	f	class:PTAMM::MapMaker
LEVELS	KeyFrame.h	37;"	d
LargestRadiusInImage	ATANCamera.h	/^    inline double LargestRadiusInImage() {  return mdLargestRadius; }$/;"	f	class:PTAMM::ATANCamera
Last	tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:PTAMM::TiXmlAttributeSet
Last	tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:PTAMM::TiXmlAttributeSet
LastAttribute	tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:PTAMM::TiXmlElement
LastAttribute	tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:PTAMM::TiXmlElement
LastChild	tinyxml.cc	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:PTAMM::TiXmlNode
LastChild	tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:PTAMM::TiXmlNode
LastChild	tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
LastChild	tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:PTAMM::TiXmlNode
LastChild	tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
LastChild	tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:PTAMM::TiXmlNode
LeastSquares	MEstimator.h	/^struct LeastSquares$/;"	s	namespace:PTAMM
Level	KeyFrame.h	/^  inline Level()$/;"	f	struct:PTAMM::Level
Level	KeyFrame.h	/^struct Level$/;"	s	namespace:PTAMM
LevelHelpersFiller	KeyFrame.cc	/^  LevelHelpersFiller()$/;"	f	struct:PTAMM::LevelHelpersFiller
LevelHelpersFiller	KeyFrame.cc	/^struct LevelHelpersFiller \/\/ Code which should be initialised on init goes here; this runs before main()$/;"	s	namespace:PTAMM	file:
LevelNPos	LevelHelpers.h	/^inline Vector<2> LevelNPos(Vector<2> v2RootPos, int nLevel)$/;"	f	namespace:PTAMM
LevelNPos	LevelHelpers.h	/^inline double LevelNPos(double dRootPos, int nLevel)$/;"	f	namespace:PTAMM
LevelScale	LevelHelpers.h	/^inline int LevelScale(int nLevel)$/;"	f	namespace:PTAMM
LevelZeroPos	LevelHelpers.h	/^inline Vector<2> LevelZeroPos(CVD::ImageRef irLevelPos, int nLevel) $/;"	f	namespace:PTAMM
LevelZeroPos	LevelHelpers.h	/^inline Vector<2> LevelZeroPos(Vector<2> v2LevelPos, int nLevel)$/;"	f	namespace:PTAMM
LevelZeroPos	LevelHelpers.h	/^inline double LevelZeroPos(double dLevelPos, int nLevel)$/;"	f	namespace:PTAMM
LineBox	GLWindowMenu.cc	/^void GLWindowMenu::LineBox(int l, int r, int t, int b)$/;"	f	class:PTAMM::GLWindowMenu
LineBreak	tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:PTAMM::TiXmlPrinter
LinearUpdate	TrackerData.h	/^  inline void LinearUpdate(const Vector<6> &v6)$/;"	f	struct:PTAMM::TrackerData
LinkEndChild	tinyxml.cc	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:PTAMM::TiXmlNode
Load	Game.h	/^    virtual void Load(std::string sDataPath)                                         \/\/\/ load game data (DO NOT MAKE GL CALLS!)$/;"	f	class:PTAMM::Game
Load	Model3ds.cc	/^bool Model3DS::Load( TiXmlElement * modelsNode )$/;"	f	class:PTAMM::Model3DS
Load	Model3ds.cc	/^bool Model3DS::Load( std::string sModelDir, std::string sFileName, TooN::Vector<3> v3Rotation )$/;"	f	class:PTAMM::Model3DS
Load	ModelsGame.cc	/^void ModelsGame::Load(std::string sDataPath)$/;"	f	class:PTAMM::ModelsGame
Load	ModelsGameData.cc	/^void ModelsGameData::Load( std::string sDataFileName )$/;"	f	class:PTAMM::ModelsGameData
Load	ShooterGame.cc	/^void ShooterGame::Load( std::string sDataFileName )$/;"	f	class:PTAMM::ShooterGame
Load	ShooterGameTarget.cc	/^void ShooterGameTarget::Load( TiXmlElement * targetsNode )$/;"	f	class:PTAMM::ShooterGameTarget
LoadAGame	Games.cc	/^Game * LoadAGame( std::string sName, std::string sGameDataFileName)$/;"	f	namespace:PTAMM
LoadFile	tinyxml.cc	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlDocument
LoadFile	tinyxml.cc	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlDocument
LoadFile	tinyxml.cc	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlDocument
LoadFile	tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:PTAMM::TiXmlDocument
LoadGame	ARDriver.cc	/^    void ARDriver::LoadGame(std::string sName)$/;"	f	class:PTAMM::ARDriver
LoadIcon	ModelBrowser.cc	/^bool BrowserItem::LoadIcon(std::string sIconFile)$/;"	f	class:PTAMM::BrowserItem
LoadMap	MapSerializer.cc	/^MapSerializer::MapStatus MapSerializer::LoadMap( Map * pMap, std::string sDirName )$/;"	f	class:PTAMM::MapSerializer
LockMap	MapLockManager.cc	/^bool MapLockManager::LockMap( void * t, int nTimeout )$/;"	f	class:PTAMM::MapLockManager
LookAt	EyeGame.cc	/^void EyeGame::LookAt(int nEye, Vector<3> v3, double dRotLimit)$/;"	f	class:PTAMM::EyeGame
M2Det	SmallMatrixOpts.h	/^inline double M2Det(Matrix<2> m)$/;"	f	namespace:PTAMM
M2Inverse	SmallMatrixOpts.h	/^inline Matrix<2> M2Inverse(const Matrix<2> &m)$/;"	f	namespace:PTAMM
M3Det	SmallMatrixOpts.h	/^inline double M3Det(Matrix<3> m )$/;"	f	namespace:PTAMM
MAP_EXISTS	MapSerializer.h	/^    enum MapStatus { MAP_OK, MAP_FAILED, MAP_EXISTS };$/;"	e	enum:PTAMM::MapSerializer::MapStatus
MAP_FAILED	MapSerializer.h	/^    enum MapStatus { MAP_OK, MAP_FAILED, MAP_EXISTS };$/;"	e	enum:PTAMM::MapSerializer::MapStatus
MAP_OK	MapSerializer.h	/^    enum MapStatus { MAP_OK, MAP_FAILED, MAP_EXISTS };$/;"	e	enum:PTAMM::MapSerializer::MapStatus
MAP_VERSION	MapSerializer.h	31;"	d
MAP_XML_ID	MapSerializer.h	30;"	d
MAX	yuv2rgb.c	6;"	d	file:
MAX_ENTITY_LENGTH	tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:PTAMM::TiXmlBase::__anon5
MD5	MD5.h	/^    MD5() {};$/;"	f	class:PTAMM::MD5
MD5	MD5.h	/^class MD5$/;"	c	namespace:PTAMM
MD5Final	MD5.cc	/^void MD5::MD5Final (unsigned char digest[16], MD5_CTX *context)$/;"	f	class:PTAMM::MD5
MD5Init	MD5.cc	/^void MD5::MD5Init (MD5_CTX *context)$/;"	f	class:PTAMM::MD5
MD5Transform	MD5.cc	/^void MD5::MD5Transform (unsigned long int state[4], const unsigned char block[64])$/;"	f	class:PTAMM::MD5
MD5Update	MD5.cc	/^void MD5::MD5Update (MD5_CTX *context, const unsigned char *input, unsigned int inputLen)$/;"	f	class:PTAMM::MD5
MD5WRAPPER_H	MD5Wrapper.h	11;"	d
MD5Wrapper	MD5Wrapper.cc	/^MD5Wrapper::MD5Wrapper()$/;"	f	class:PTAMM::MD5Wrapper
MD5Wrapper	MD5Wrapper.h	/^class MD5Wrapper$/;"	c	namespace:PTAMM
MD5_CTX	MD5.h	/^} MD5_CTX;$/;"	t	namespace:PTAMM	typeref:struct:PTAMM::__anon2
MD5_H	MD5.h	36;"	d
MD5_memcpy	MD5.cc	/^void MD5::MD5_memcpy (POINTER output, POINTER input, unsigned int len)$/;"	f	class:PTAMM::MD5
MD5_memset	MD5.cc	/^void MD5::MD5_memset (POINTER output,int value,unsigned int len)$/;"	f	class:PTAMM::MD5
MGBUTTON_H	MGButton.h	4;"	d
MGButton	MGButton.cc	/^MGButton::MGButton( std::string sName, bool bEnableRepeat, bool bToggle )$/;"	f	class:PTAMM::MGButton
MGButton	MGButton.h	/^class MGButton {$/;"	c	namespace:PTAMM
MIN	yuv2rgb.c	9;"	d	file:
MLESACScore	HomographyInit.cc	/^double HomographyInit::MLESACScore(Matrix<3> m3Homography, HomographyMatch match)$/;"	f	class:PTAMM::HomographyInit
MODEL	ModelBrowser.h	/^    enum CLICK_STATUS { OK, NONE, CANCEL, MODEL };$/;"	e	enum:PTAMM::ModelBrowser::CLICK_STATUS
MODEL3DS_H	Model3ds.h	11;"	d
MODELSGAME_H	ModelsGame.h	12;"	d
MODEL_DB_ID	ModelBrowser.h	27;"	d
MODEL_DB_VERSION	ModelBrowser.h	28;"	d
MakeFrameBuffer	ARDriver.cc	/^    void ARDriver::MakeFrameBuffer()$/;"	f	class:PTAMM::ARDriver
MakeFromImage	CalibImage.cc	/^bool CalibImage::MakeFromImage(Image<CVD::byte> &im)$/;"	f	class:PTAMM::CalibImage
MakeFromKF	SmallBlurryImage.cc	/^void SmallBlurryImage::MakeFromKF(const KeyFrame &kf, double dBlur)$/;"	f	class:PTAMM::SmallBlurryImage
MakeJacs	SmallBlurryImage.cc	/^void SmallBlurryImage::MakeJacs()$/;"	f	class:PTAMM::SmallBlurryImage
MakeKeyFrame_Lite	KeyFrame.cc	/^void KeyFrame::MakeKeyFrame_Lite(BasicImage<CVD::byte> &im)$/;"	f	class:PTAMM::KeyFrame
MakeKeyFrame_Rest	KeyFrame.cc	/^void KeyFrame::MakeKeyFrame_Rest()$/;"	f	class:PTAMM::KeyFrame
MakeShadowTex	EyeGame.cc	/^void EyeGame::MakeShadowTex()$/;"	f	class:PTAMM::EyeGame
MakeSharedTemplate	CalibCornerPatch.cc	/^void CalibCornerPatch::MakeSharedTemplate()$/;"	f	class:PTAMM::CalibCornerPatch
MakeSubPixTemplate	PatchFinder.cc	/^void PatchFinder::MakeSubPixTemplate()$/;"	f	class:PTAMM::PatchFinder
MakeTemplateCoarse	PatchFinder.cc	/^void PatchFinder::MakeTemplateCoarse(MapPoint &p,$/;"	f	class:PTAMM::PatchFinder
MakeTemplateCoarseCont	PatchFinder.cc	/^void PatchFinder::MakeTemplateCoarseCont(MapPoint &p)$/;"	f	class:PTAMM::PatchFinder
MakeTemplateCoarseNoWarp	PatchFinder.cc	/^void PatchFinder::MakeTemplateCoarseNoWarp(KeyFrame &k, int nLevel, ImageRef irLevelPos)$/;"	f	class:PTAMM::PatchFinder
MakeTemplateCoarseNoWarp	PatchFinder.cc	/^void PatchFinder::MakeTemplateCoarseNoWarp(MapPoint &p)$/;"	f	class:PTAMM::PatchFinder
MakeTemplateSums	PatchFinder.cc	/^inline void PatchFinder::MakeTemplateSums()$/;"	f	class:PTAMM::PatchFinder
MakeTemplateWithCurrentParams	CalibCornerPatch.cc	/^void CalibCornerPatch::MakeTemplateWithCurrentParams()$/;"	f	class:PTAMM::CalibCornerPatch
MakeUFBLinearFrustumMatrix	ATANCamera.cc	/^Matrix<4> ATANCamera::MakeUFBLinearFrustumMatrix(double near, double far)$/;"	f	class:PTAMM::ATANCamera
Map	Map.cc	/^Map::Map()$/;"	f	class:PTAMM::Map
Map	Map.h	/^class Map$/;"	c	namespace:PTAMM
MapID	Map.h	/^    int MapID() { return mnMapNum; }$/;"	f	class:PTAMM::Map
MapLockManager	MapLockManager.h	/^    MapLockManager() : mLockingThread(NULL), mbLocked(false)  {}$/;"	f	class:PTAMM::MapLockManager
MapLockManager	MapLockManager.h	/^class MapLockManager$/;"	c	namespace:PTAMM
MapMaker	MapMaker.cc	/^    MapMaker::MapMaker(std::vector<Map*> &maps, Map* m)$/;"	f	class:PTAMM::MapMaker
MapMaker	MapMaker.h	/^class MapMaker : protected CVD::Thread$/;"	c	namespace:PTAMM
MapMakerData	MapPoint.h	/^struct MapMakerData$/;"	s	namespace:PTAMM
MapPoint	MapPoint.h	/^  inline MapPoint()$/;"	f	struct:PTAMM::MapPoint
MapPoint	MapPoint.h	/^struct MapPoint$/;"	s	namespace:PTAMM
MapSerializer	MapSerializer.cc	/^MapSerializer::MapSerializer( std::vector<Map*> &maps )$/;"	f	class:PTAMM::MapSerializer
MapSerializer	MapSerializer.h	/^class MapSerializer : public CVD::Thread$/;"	c	namespace:PTAMM
MapStatus	MapSerializer.h	/^    enum MapStatus { MAP_OK, MAP_FAILED, MAP_EXISTS };$/;"	g	class:PTAMM::MapSerializer
MapViewer	MapViewer.cc	/^MapViewer::MapViewer(std::vector<Map*> &maps, Map *map, GLWindow2 &glw):$/;"	f	class:PTAMM::MapViewer
MapViewer	MapViewer.h	/^class MapViewer$/;"	c	namespace:PTAMM
Meas	Bundle.h	/^  inline Meas()$/;"	f	struct:PTAMM::Meas
Meas	Bundle.h	/^struct Meas$/;"	s	namespace:PTAMM
Measurement	KeyFrame.h	/^struct Measurement$/;"	s	namespace:PTAMM
MenuItem	GLWindowMenu.h	/^  struct MenuItem$/;"	s	class:PTAMM::GLWindowMenu
MenuItemType	GLWindowMenu.h	/^  enum MenuItemType { Button, Toggle, Monitor, Slider };$/;"	g	class:PTAMM::GLWindowMenu
MiniPatch	MiniPatch.h	/^struct MiniPatch$/;"	s	namespace:PTAMM
Model3DS	Model3ds.cc	/^Model3DS::Model3DS( )$/;"	f	class:PTAMM::Model3DS
Model3DS	Model3ds.h	/^class Model3DS{$/;"	c	namespace:PTAMM
ModelBrowser	ModelBrowser.cc	/^ModelBrowser::ModelBrowser()$/;"	f	class:PTAMM::ModelBrowser
ModelBrowser	ModelBrowser.h	/^class ModelBrowser {$/;"	c	namespace:PTAMM
ModelControls	ModelControls.cc	/^ModelControls::ModelControls( ModelsGameData & data)$/;"	f	class:PTAMM::ModelControls
ModelControls	ModelControls.h	/^class ModelControls{$/;"	c	namespace:PTAMM
ModelData	ModelBrowser.h	/^struct ModelData {$/;"	s	namespace:PTAMM
ModelItem	ModelBrowser.h	/^    ModelItem( const ModelData & model ) : data(model) {};$/;"	f	class:PTAMM::ModelItem
ModelItem	ModelBrowser.h	/^class ModelItem : public BrowserItem$/;"	c	namespace:PTAMM
Models	ModelsGameData.h	/^    const std::vector< Model3DS* > & Models() { return mvModels; }$/;"	f	class:PTAMM::ModelsGameData
ModelsGame	ModelsGame.cc	/^ModelsGame::ModelsGame()$/;"	f	class:PTAMM::ModelsGame
ModelsGame	ModelsGame.h	/^class ModelsGame : public Game$/;"	c	namespace:PTAMM
ModelsGameData	ModelsGameData.cc	/^ModelsGameData::ModelsGameData( string sName ) :$/;"	f	class:PTAMM::ModelsGameData
ModelsGameData	ModelsGameData.h	/^class ModelsGameData{$/;"	c	namespace:PTAMM
ModifyLambda_BadStep	Bundle.cc	/^void Bundle::ModifyLambda_BadStep()$/;"	f	class:PTAMM::Bundle
ModifyLambda_GoodStep	Bundle.cc	/^void Bundle::ModifyLambda_GoodStep()$/;"	f	class:PTAMM::Bundle
Monitor	GLWindowMenu.h	/^  enum MenuItemType { Button, Toggle, Monitor, Slider };$/;"	e	enum:PTAMM::GLWindowMenu::MenuItemType
MoveBack	Model3ds.cc	/^void Model3DS::MoveBack()$/;"	f	class:PTAMM::Model3DS
MoveBack_cb	ModelControls.cc	/^void MoveBack_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
MoveBadPointsToTrash	Map.cc	/^void Map::MoveBadPointsToTrash()$/;"	f	class:PTAMM::Map
MoveDown	Model3ds.cc	/^void Model3DS::MoveDown()$/;"	f	class:PTAMM::Model3DS
MoveDown_cb	ModelControls.cc	/^void MoveDown_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
MoveForwards	Model3ds.cc	/^void Model3DS::MoveForwards()$/;"	f	class:PTAMM::Model3DS
MoveFwds_cb	ModelControls.cc	/^void MoveFwds_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
MoveLeft	Model3ds.cc	/^void Model3DS::MoveLeft()$/;"	f	class:PTAMM::Model3DS
MoveLeft_cb	ModelControls.cc	/^void MoveLeft_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
MoveRight	Model3ds.cc	/^void Model3DS::MoveRight()$/;"	f	class:PTAMM::Model3DS
MoveRight_cb	ModelControls.cc	/^void MoveRight_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
MoveTo	Model3ds.cc	/^void Model3DS::MoveTo( Vector<3> v3Position )$/;"	f	class:PTAMM::Model3DS
MoveUp	Model3ds.cc	/^void Model3DS::MoveUp()$/;"	f	class:PTAMM::Model3DS
MoveUp_cb	ModelControls.cc	/^void MoveUp_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
NClosestKeyFrames	MapMaker.cc	/^    vector<KeyFrame*> MapMaker::NClosestKeyFrames(KeyFrame &k, unsigned int N)$/;"	f	class:PTAMM::MapMaker
NONE	ModelBrowser.h	/^    enum CLICK_STATUS { OK, NONE, CANCEL, MODEL };$/;"	e	enum:PTAMM::ModelBrowser::CLICK_STATUS
NUMTRACKERCAMPARAMETERS	ATANCamera.h	56;"	d
NUM_ENTITY	tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:PTAMM::TiXmlBase::__anon5
NUM_LOST_FRAMES	Tracker.h	33;"	d
N_FAILED	CalibImage.h	/^const int N_FAILED=-2;$/;"	m	namespace:PTAMM
N_NOT_TRIED	CalibImage.h	/^const int N_NOT_TRIED=-1;$/;"	m	namespace:PTAMM
Name	ATANCamera.h	/^    std::string Name() { return msName; }$/;"	f	class:PTAMM::ATANCamera
Name	Game.h	/^    std::string Name() { return msName; }                                            \/\/\/ The name of the game$/;"	f	class:PTAMM::Game
Name	Model3ds.h	/^    std::string & Name() { return msName; }$/;"	f	class:PTAMM::Model3DS
Name	tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:PTAMM::TiXmlAttribute
NameTStr	tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:PTAMM::TiXmlAttribute
NeedNewKeyFrame	MapMaker.cc	/^    bool MapMaker::NeedNewKeyFrame(KeyFrame &kCurrent)$/;"	f	class:PTAMM::MapMaker
NeighborState	CalibImage.h	/^    NeighborState() {val = N_NOT_TRIED;}$/;"	f	struct:PTAMM::CalibGridCorner::NeighborState
NeighborState	CalibImage.h	/^  struct NeighborState$/;"	s	struct:PTAMM::CalibGridCorner
NewMap	System.cc	/^void System::NewMap()$/;"	f	class:PTAMM::System
Next	tinyxml.cc	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:PTAMM::TiXmlAttribute
Next	tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:PTAMM::TiXmlAttribute
NextModel	ModelsGameData.cc	/^void ModelsGameData::NextModel()$/;"	f	class:PTAMM::ModelsGameData
NextModel_cb	ModelControls.cc	/^void NextModel_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
NextPage	ModelBrowser.h	/^    void NextPage() { nIndex++; if( nIndex >= (int)vPages.size() ) nIndex = (int)vPages.size() -1; }$/;"	f	class:PTAMM::Pages
NextSibling	tinyxml.cc	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:PTAMM::TiXmlNode
NextSibling	tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:PTAMM::TiXmlNode
NextSibling	tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
NextSibling	tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:PTAMM::TiXmlNode
NextSibling	tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
NextSibling	tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.cc	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.cc	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:PTAMM::TiXmlNode
NextSiblingElement	tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
NextToExpand	CalibImage.cc	/^int CalibImage::NextToExpand()$/;"	f	class:PTAMM::CalibImage
NoChildren	tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:PTAMM::TiXmlNode
Node	tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:PTAMM::TiXmlHandle
NodeType	tinyxml.h	/^	enum NodeType$/;"	g	class:PTAMM::TiXmlNode
NumModels	ModelsGameData.h	/^    size_t NumModels() { return mvModels.size(); }$/;"	f	class:PTAMM::ModelsGameData
OK	ModelBrowser.h	/^    enum CLICK_STATUS { OK, NONE, CANCEL, MODEL };$/;"	e	enum:PTAMM::ModelBrowser::CLICK_STATUS
ObjectiveScore	MEstimator.h	/^inline double Cauchy::ObjectiveScore(double dErrorSquared, const double dSigmaSquared)$/;"	f	class:PTAMM::Cauchy
ObjectiveScore	MEstimator.h	/^inline double Huber::ObjectiveScore(double dErrorSquared, const double dSigmaSquared)$/;"	f	class:PTAMM::Huber
ObjectiveScore	MEstimator.h	/^inline double LeastSquares::ObjectiveScore(double dErrorSquared, const double dSigmaSquared)$/;"	f	class:PTAMM::LeastSquares
ObjectiveScore	MEstimator.h	/^inline double Tukey::ObjectiveScore(double dErrorSquared, const double dSigmaSquared)$/;"	f	class:PTAMM::Tukey
OffDiagScriptEntry	Bundle.h	/^struct OffDiagScriptEntry$/;"	s	namespace:PTAMM
OnePixelDist	ATANCamera.h	/^    inline double OnePixelDist() { return mdOnePixelDist; }$/;"	f	class:PTAMM::ATANCamera
OptimizeOneStep	CameraCalibrator.cc	/^void CameraCalibrator::OptimizeOneStep()$/;"	f	class:CameraCalibrator
PADDING	MD5.cc	/^static unsigned char PADDING[64] = {$/;"	m	namespace:PTAMM	file:
POINTER	MD5.h	/^typedef unsigned char *POINTER;$/;"	t	namespace:PTAMM
PTAMM	ARDriver.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ARDriver.h	/^namespace PTAMM {$/;"	n
PTAMM	ATANCamera.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ATANCamera.h	/^namespace PTAMM {$/;"	n
PTAMM	Bundle.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Bundle.h	/^namespace PTAMM {$/;"	n
PTAMM	CalibCornerPatch.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	CalibCornerPatch.h	/^namespace PTAMM {$/;"	n
PTAMM	CalibImage.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	CalibImage.h	/^namespace PTAMM {$/;"	n
PTAMM	CameraCalibrator.h	/^namespace PTAMM {$/;"	n
PTAMM	EyeGame.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	EyeGame.h	/^namespace PTAMM {$/;"	n
PTAMM	GLWindow2.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	GLWindow2.h	/^namespace PTAMM {$/;"	n
PTAMM	GLWindowMenu.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	GLWindowMenu.h	/^namespace PTAMM {$/;"	n
PTAMM	Game.h	/^namespace PTAMM {$/;"	n
PTAMM	Games.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Games.h	/^namespace PTAMM {$/;"	n
PTAMM	HomographyInit.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	HomographyInit.h	/^namespace PTAMM {$/;"	n
PTAMM	KeyFrame.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	KeyFrame.h	/^namespace PTAMM {$/;"	n
PTAMM	LevelHelpers.h	/^namespace PTAMM {$/;"	n
PTAMM	MD5.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MD5.h	/^namespace PTAMM {$/;"	n
PTAMM	MD5Wrapper.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MD5Wrapper.h	/^namespace PTAMM {$/;"	n
PTAMM	MEstimator.h	/^namespace PTAMM {$/;"	n
PTAMM	MGButton.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MGButton.h	/^namespace PTAMM {$/;"	n
PTAMM	Map.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Map.h	/^namespace PTAMM {$/;"	n
PTAMM	MapLockManager.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MapLockManager.h	/^namespace PTAMM {$/;"	n
PTAMM	MapMaker.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MapMaker.h	/^namespace PTAMM {$/;"	n
PTAMM	MapPoint.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MapPoint.h	/^namespace PTAMM {$/;"	n
PTAMM	MapSerializer.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MapSerializer.h	/^namespace PTAMM {$/;"	n
PTAMM	MapViewer.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MapViewer.h	/^namespace PTAMM {$/;"	n
PTAMM	MiniPatch.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	MiniPatch.h	/^namespace PTAMM {$/;"	n
PTAMM	Model3ds.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Model3ds.h	/^namespace PTAMM {$/;"	n
PTAMM	ModelBrowser.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ModelBrowser.h	/^namespace PTAMM {$/;"	n
PTAMM	ModelControls.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ModelControls.h	/^namespace PTAMM {$/;"	n
PTAMM	ModelsGame.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ModelsGame.h	/^namespace PTAMM {$/;"	n
PTAMM	ModelsGameData.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ModelsGameData.h	/^namespace PTAMM {$/;"	n
PTAMM	PatchFinder.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	PatchFinder.h	/^namespace PTAMM {$/;"	n
PTAMM	Relocaliser.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Relocaliser.h	/^namespace PTAMM {$/;"	n
PTAMM	ShiTomasi.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ShiTomasi.h	/^namespace PTAMM {$/;"	n
PTAMM	ShooterGame.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ShooterGame.h	/^namespace PTAMM {$/;"	n
PTAMM	ShooterGameTarget.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	ShooterGameTarget.h	/^namespace PTAMM {$/;"	n
PTAMM	SmallBlurryImage.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	SmallBlurryImage.h	/^namespace PTAMM {$/;"	n
PTAMM	SmallMatrixOpts.h	/^namespace PTAMM {$/;"	n
PTAMM	System.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	System.h	/^namespace PTAMM {$/;"	n
PTAMM	Tracker.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Tracker.h	/^namespace PTAMM {$/;"	n
PTAMM	TrackerData.h	/^namespace PTAMM {$/;"	n
PTAMM	Utils.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	Utils.h	/^namespace PTAMM {$/;"	n
PTAMM	VideoSource.h	/^namespace PTAMM {$/;"	n
PTAMM	tinyxml.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	tinyxml.h	/^namespace PTAMM {$/;"	n
PTAMM	tinyxmlerror.cc	/^namespace PTAMM {$/;"	n	file:
PTAMM	tinyxmlparser.cc	/^namespace PTAMM {$/;"	n	file:
PTAMMMODELBROWSER_H	ModelBrowser.h	14;"	d
PTAMMMODELCONTROLS_H	ModelControls.h	14;"	d
PTAMMMODELSGAMEDATA_H	ModelsGameData.h	12;"	d
PTAMMSHOOTERGAMETARGET_H	ShooterGameTarget.h	14;"	d
Page	ModelBrowser.h	/^    Page() {};$/;"	f	class:PTAMM::Page
Page	ModelBrowser.h	/^class Page$/;"	c	namespace:PTAMM
Pages	ModelBrowser.h	/^    Pages( Pages * pParent) : nIndex(0), mpParent(pParent) {};$/;"	f	class:PTAMM::Pages
Pages	ModelBrowser.h	/^class Pages$/;"	c	namespace:PTAMM
Params	CalibCornerPatch.cc	/^CalibCornerPatch::Params::Params()$/;"	f	class:PTAMM::CalibCornerPatch::Params
Params	CalibCornerPatch.h	/^  struct Params$/;"	s	class:PTAMM::CalibCornerPatch
Params	CalibImage.h	/^  CalibCornerPatch::Params Params;$/;"	m	struct:PTAMM::CalibGridCorner
Parent	ModelBrowser.h	/^    Pages * Parent() { return mpParent; }$/;"	f	class:PTAMM::Pages
Parent	tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:PTAMM::TiXmlNode
Parent	tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:PTAMM::TiXmlNode
Parse	tinyxmlparser.cc	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlAttribute
Parse	tinyxmlparser.cc	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlComment
Parse	tinyxmlparser.cc	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:PTAMM::TiXmlDeclaration
Parse	tinyxmlparser.cc	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlDocument
Parse	tinyxmlparser.cc	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlElement
Parse	tinyxmlparser.cc	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlText
Parse	tinyxmlparser.cc	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlUnknown
PatchFinder	PatchFinder.cc	/^PatchFinder::PatchFinder(int nPatchSize)$/;"	f	class:PTAMM::PatchFinder
PatchFinder	PatchFinder.h	/^class PatchFinder$/;"	c	namespace:PTAMM
PitchDecrease	Model3ds.cc	/^void Model3DS::PitchDecrease()$/;"	f	class:PTAMM::Model3DS
PitchDecrease_cb	ModelControls.cc	/^void PitchDecrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
PitchIncrease	Model3ds.cc	/^void Model3DS::PitchIncrease()$/;"	f	class:PTAMM::Model3DS
PitchIncrease_cb	ModelControls.cc	/^void PitchIncrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
PixelAspectRatio	ATANCamera.h	/^    double PixelAspectRatio() { return mvFocal[1] \/ mvFocal[0];}$/;"	f	class:PTAMM::ATANCamera
Point	Bundle.h	/^  inline Point()$/;"	f	struct:PTAMM::Point
Point	Bundle.h	/^struct Point$/;"	s	namespace:PTAMM
Point	TrackerData.h	/^  MapPoint &Point;$/;"	m	struct:PTAMM::TrackerData
Pose	Model3ds.h	/^    const SE3<> & Pose() { return mse3MfromW; }$/;"	f	class:PTAMM::Model3DS
PrevModel	ModelsGameData.cc	/^void ModelsGameData::PrevModel()$/;"	f	class:PTAMM::ModelsGameData
PrevModel_cb	ModelControls.cc	/^void PrevModel_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
PrevPage	ModelBrowser.h	/^    void PrevPage() { nIndex--; if( nIndex < 0 ) nIndex = 0; }$/;"	f	class:PTAMM::Pages
Previous	tinyxml.cc	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:PTAMM::TiXmlAttribute
Previous	tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:PTAMM::TiXmlAttribute
PreviousSibling	tinyxml.cc	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:PTAMM::TiXmlNode
PreviousSibling	tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:PTAMM::TiXmlNode
PreviousSibling	tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
PreviousSibling	tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:PTAMM::TiXmlNode
PreviousSibling	tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlNode
PreviousSibling	tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:PTAMM::TiXmlNode
Print	tinyxml.cc	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:PTAMM::TiXmlAttribute
Print	tinyxml.cc	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:PTAMM::TiXmlComment
Print	tinyxml.cc	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:PTAMM::TiXmlDeclaration
Print	tinyxml.cc	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:PTAMM::TiXmlDocument
Print	tinyxml.cc	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:PTAMM::TiXmlElement
Print	tinyxml.cc	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:PTAMM::TiXmlText
Print	tinyxml.cc	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:PTAMM::TiXmlUnknown
Print	tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:PTAMM::TiXmlAttribute
Print	tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:PTAMM::TiXmlDeclaration
Print	tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:PTAMM::TiXmlDocument
PrintOptions	MapSerializer.cc	/^void MapSerializer::PrintOptions()$/;"	f	class:PTAMM::MapSerializer
PrintString	GLWindow2.cc	/^const void GLWindow2::PrintString(CVD::ImageRef irPos, std::string s) const$/;"	f	class:PTAMM::GLWindow2
Project	ATANCamera.cc	/^Vector<2> ATANCamera::Project(const Vector<2>& vCam){$/;"	f	class:PTAMM::ATANCamera
Project	ATANCamera.h	/^    inline Vector<2> Project(CVD::ImageRef ir) { return Project(vec(ir)); }$/;"	f	class:PTAMM::ATANCamera
Project	CalibImage.cc	/^vector<CalibImage::ErrorAndJacobians> CalibImage::Project(ATANCamera &Camera)$/;"	f	class:PTAMM::CalibImage
Project	TrackerData.h	/^  inline void Project(const SE3<> &se3CFromW, ATANCamera &Cam)$/;"	f	struct:PTAMM::TrackerData
ProjectAndDerivs	TrackerData.h	/^  inline void ProjectAndDerivs(SE3<> &se3, ATANCamera &Cam)$/;"	f	struct:PTAMM::TrackerData
ProjectAndFindSquaredError	Bundle.cc	/^inline void Bundle::ProjectAndFindSquaredError(Meas &meas)$/;"	f	class:PTAMM::Bundle
PruneWhiteSpace	Utils.cc	/^void PruneWhiteSpace(std::string & str)$/;"	f	namespace:PTAMM
QueryDoubleAttribute	tinyxml.cc	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:PTAMM::TiXmlElement
QueryDoubleAttribute	tinyxml.cc	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:PTAMM::TiXmlElement
QueryDoubleValue	tinyxml.cc	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:PTAMM::TiXmlAttribute
QueryFloatAttribute	tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:PTAMM::TiXmlElement
QueryIntAttribute	tinyxml.cc	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:PTAMM::TiXmlElement
QueryIntAttribute	tinyxml.cc	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:PTAMM::TiXmlElement
QueryIntValue	tinyxml.cc	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:PTAMM::TiXmlAttribute
QueryValueAttribute	tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:PTAMM::TiXmlElement
QueueSize	Map.h	/^    int  QueueSize() { return static_cast<int>(vpKeyFrameQueue.size()); } \/\/ How many KFs in the queue waiting to be added?$/;"	f	class:PTAMM::Map
ROTATE_LEFT	MD5.cc	71;"	d	file:
RPrediction	Tracker.h	/^  SO3<> RPrediction;$/;"	m	class:PTAMM::Tracker
Rbinv	Tracker.h	/^  SO3<> Rbinv;$/;"	m	class:PTAMM::Tracker
Rc2i	Tracker.h	/^  SO3<> Rc2i;$/;"	m	class:PTAMM::Tracker
ReFindFromFailureQueue	MapMaker.cc	/^    void MapMaker::ReFindFromFailureQueue()$/;"	f	class:PTAMM::MapMaker
ReFindInSingleKeyFrame	MapMaker.cc	/^    int MapMaker::ReFindInSingleKeyFrame(KeyFrame &k)$/;"	f	class:PTAMM::MapMaker
ReFindNewlyMade	MapMaker.cc	/^    void MapMaker::ReFindNewlyMade()$/;"	f	class:PTAMM::MapMaker
ReFind_Common	MapMaker.cc	/^    bool MapMaker::ReFind_Common(KeyFrame &k, MapPoint &p)$/;"	f	class:PTAMM::MapMaker
ReInit	MapMaker.cc	/^    void MapMaker::ReInit()$/;"	f	class:PTAMM::MapMaker
ReInitDone	MapMaker.cc	/^    bool MapMaker::ReInitDone()$/;"	f	class:PTAMM::MapMaker
ReadName	tinyxmlparser.cc	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlBase
ReadText	tinyxmlparser.cc	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:PTAMM::TiXmlBase
ReadValue	tinyxmlparser.cc	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlElement
RefineHomographyWithInliers	HomographyInit.cc	/^void HomographyInit::RefineHomographyWithInliers()$/;"	f	class:PTAMM::HomographyInit
RefreshParams	ATANCamera.cc	/^void ATANCamera::RefreshParams() $/;"	f	class:PTAMM::ATANCamera
RefreshPixelVectors	MapPoint.cc	/^void MapPoint::RefreshPixelVectors()$/;"	f	class:PTAMM::MapPoint
RefreshSceneDepth	MapMaker.cc	/^    void MapMaker::RefreshSceneDepth(KeyFrame *pKF)$/;"	f	class:PTAMM::MapMaker
Register	MapLockManager.cc	/^void MapLockManager::Register( void * t )$/;"	f	class:PTAMM::MapLockManager
Relocaliser	Relocaliser.cc	/^Relocaliser::Relocaliser(std::vector<Map*> &maps, ATANCamera &camera)$/;"	f	class:PTAMM::Relocaliser
Relocaliser	Relocaliser.h	/^class Relocaliser$/;"	c	namespace:PTAMM
Remove	tinyxml.cc	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:PTAMM::TiXmlAttributeSet
RemoveAttribute	tinyxml.cc	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:PTAMM::TiXmlElement
RemoveAttribute	tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:PTAMM::TiXmlElement
RemoveChild	tinyxml.cc	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:PTAMM::TiXmlNode
Render	ARDriver.cc	/^    void ARDriver::Render(Image<Rgb<CVD::byte> > &imFrame, SE3<> se3CfromW, bool bLost)$/;"	f	class:PTAMM::ARDriver
Render	GLWindowMenu.cc	/^void GLWindowMenu::Render(int nTop, int nHeight, int nWidth, GLWindow2 &glw)$/;"	f	class:PTAMM::GLWindowMenu
RenderGrid	Tracker.cc	/^    void Tracker::RenderGrid()$/;"	f	class:PTAMM::Tracker
ReplaceChild	tinyxml.cc	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:PTAMM::TiXmlNode
ReprojectPoint	MapMaker.cc	/^    Vector<3> MapMaker::ReprojectPoint(SE3<> se3AfromB, const Vector<2> &v2A, const Vector<2> &v2B)$/;"	f	class:PTAMM::MapMaker
RequestReInit	MapMaker.cc	/^    void MapMaker::RequestReInit(Map * map)$/;"	f	class:PTAMM::MapMaker
RequestReset	MapMaker.cc	/^    void MapMaker::RequestReset()$/;"	f	class:PTAMM::MapMaker
RequestSwitch	MapMaker.cc	/^    bool MapMaker::RequestSwitch(Map * map)$/;"	f	class:PTAMM::MapMaker
Reset	ARDriver.cc	/^    void ARDriver::Reset()$/;"	f	class:PTAMM::ARDriver
Reset	CameraCalibrator.cc	/^void CameraCalibrator::Reset()$/;"	f	class:CameraCalibrator
Reset	EyeGame.cc	/^void EyeGame::Reset()$/;"	f	class:PTAMM::EyeGame
Reset	Map.cc	/^void Map::Reset()$/;"	f	class:PTAMM::Map
Reset	MapMaker.cc	/^    void MapMaker::Reset(Map * map)$/;"	f	class:PTAMM::MapMaker
Reset	MapMaker.h	/^    void Reset() { Reset(mpMap); }$/;"	f	class:PTAMM::MapMaker
Reset	Model3ds.cc	/^void Model3DS::Reset()$/;"	f	class:PTAMM::Model3DS
Reset	ModelBrowser.cc	/^void ModelBrowser::Reset()$/;"	f	class:PTAMM::ModelBrowser
Reset	ModelsGame.cc	/^void ModelsGame::Reset()$/;"	f	class:PTAMM::ModelsGame
Reset	ModelsGameData.cc	/^void ModelsGameData::Reset()$/;"	f	class:PTAMM::ModelsGameData
Reset	ShooterGame.cc	/^void ShooterGame::Reset()$/;"	f	class:PTAMM::ShooterGame
Reset	Tracker.cc	/^    void Tracker::Reset()$/;"	f	class:PTAMM::Tracker
ResetAll	System.cc	/^void System::ResetAll()$/;"	f	class:PTAMM::System
ResetCommon	Tracker.cc	/^    void Tracker::ResetCommon()$/;"	f	class:PTAMM::Tracker
ResetDone	MapMaker.cc	/^    bool MapMaker::ResetDone()$/;"	f	class:PTAMM::MapMaker
ResetModel_cb	ModelControls.cc	/^void ResetModel_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
RollDecrease	Model3ds.cc	/^void Model3DS::RollDecrease()$/;"	f	class:PTAMM::Model3DS
RollDecrease_cb	ModelControls.cc	/^void RollDecrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
RollIncrease	Model3ds.cc	/^void Model3DS::RollIncrease()$/;"	f	class:PTAMM::Model3DS
RollIncrease_cb	ModelControls.cc	/^void RollIncrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
RootElement	tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:PTAMM::TiXmlDocument
RootElement	tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:PTAMM::TiXmlDocument
Row	tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:PTAMM::TiXmlBase
Run	CameraCalibrator.cc	/^void CameraCalibrator::Run()$/;"	f	class:CameraCalibrator
Run	System.cc	/^void System::Run(float* q)$/;"	f	class:PTAMM::System
S11	MD5.cc	41;"	d	file:
S12	MD5.cc	42;"	d	file:
S13	MD5.cc	43;"	d	file:
S14	MD5.cc	44;"	d	file:
S21	MD5.cc	45;"	d	file:
S22	MD5.cc	46;"	d	file:
S23	MD5.cc	47;"	d	file:
S24	MD5.cc	48;"	d	file:
S31	MD5.cc	49;"	d	file:
S32	MD5.cc	50;"	d	file:
S33	MD5.cc	51;"	d	file:
S34	MD5.cc	52;"	d	file:
S41	MD5.cc	53;"	d	file:
S42	MD5.cc	54;"	d	file:
S43	MD5.cc	55;"	d	file:
S44	MD5.cc	56;"	d	file:
SE3fromSE2	SmallBlurryImage.cc	/^SE3<> SmallBlurryImage::SE3fromSE2(SE2<> se2, ATANCamera camera) $/;"	f	class:PTAMM::SmallBlurryImage
SHOOTERGAME_H	ShooterGame.h	12;"	d
SRC_EPIPOLAR	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	e	enum:PTAMM::Measurement::__anon1
SRC_REFIND	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	e	enum:PTAMM::Measurement::__anon1
SRC_ROOT	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	e	enum:PTAMM::Measurement::__anon1
SRC_TRACKER	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	e	enum:PTAMM::Measurement::__anon1
SRC_TRAIL	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	e	enum:PTAMM::Measurement::__anon1
SSDAtPoint	MiniPatch.cc	/^inline int MiniPatch::SSDAtPoint(CVD::BasicImage<CVD::byte> &im, const CVD::ImageRef &ir)$/;"	f	class:PTAMM::MiniPatch
SampleFromImage	MiniPatch.cc	/^void MiniPatch::SampleFromImage(ImageRef irPos, BasicImage<CVD::byte> &im)$/;"	f	class:PTAMM::MiniPatch
SampsonusError	HomographyInit.cc	/^static double SampsonusError(Vector<2> &v2Dash, const Matrix<3> &m3Essential, Vector<2> &v2)$/;"	f	namespace:PTAMM
Save	Game.h	/^    virtual std::string Save(std::string sMapPath)                                   \/\/\/ save game data (DO NOT MAKE GL CALLS!)$/;"	f	class:PTAMM::Game
Save	Model3ds.cc	/^void Model3DS::Save( TiXmlElement * modelsNode )$/;"	f	class:PTAMM::Model3DS
Save	ModelsGame.cc	/^std::string ModelsGame::Save(std::string sMapPath)$/;"	f	class:PTAMM::ModelsGame
Save	ModelsGameData.cc	/^void ModelsGameData::Save( std::string sDataFileName )$/;"	f	class:PTAMM::ModelsGameData
Save	ShooterGame.cc	/^std::string ShooterGame::Save(std::string sMapPath)$/;"	f	class:PTAMM::ShooterGame
Save	ShooterGameTarget.cc	/^void ShooterGameTarget::Save(  TiXmlElement * targetsNode )$/;"	f	class:PTAMM::ShooterGameTarget
SaveFIFO	System.cc	/^void System::SaveFIFO()$/;"	f	class:PTAMM::System
SaveFile	tinyxml.cc	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:PTAMM::TiXmlDocument
SaveFile	tinyxml.cc	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:PTAMM::TiXmlDocument
SaveFile	tinyxml.cc	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:PTAMM::TiXmlDocument
SaveFile	tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:PTAMM::TiXmlDocument
SaveMap	MapSerializer.cc	/^MapSerializer::MapStatus MapSerializer::SaveMap( Map * pMap, std::string sDirName )$/;"	f	class:PTAMM::MapSerializer
SaveMaps	MapSerializer.cc	/^void MapSerializer::SaveMaps( std::vector<Map*> & vpMaps,  std::string sBaseName )$/;"	f	class:PTAMM::MapSerializer
Scale	Model3ds.h	/^    const double Scale() { return mdScale; }$/;"	f	class:PTAMM::Model3DS
ScaleDecrease	Model3ds.cc	/^void Model3DS::ScaleDecrease()$/;"	f	class:PTAMM::Model3DS
ScaleDecrease_cb	ModelControls.cc	/^void ScaleDecrease_cb(  ModelsGameData & data )$/;"	f	namespace:PTAMM
ScaleIncrease	Model3ds.cc	/^void Model3DS::ScaleIncrease()$/;"	f	class:PTAMM::Model3DS
ScaleIncrease_cb	ModelControls.cc	/^void ScaleIncrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
ScoreKFs	Relocaliser.cc	/^void Relocaliser::ScoreKFs(Map * pMap, KeyFrame &kCurrent)$/;"	f	class:PTAMM::Relocaliser
SearchForPoints	Tracker.cc	/^    int Tracker::SearchForPoints(vector<TrackerData*> &vTD, int nRange, int nSubPixIts)$/;"	f	class:PTAMM::Tracker
SetAttribute	tinyxml.cc	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:PTAMM::TiXmlElement
SetAttribute	tinyxml.cc	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:PTAMM::TiXmlElement
SetAttribute	tinyxml.cc	/^void TiXmlElement::SetAttribute( const std::string& name, const std::string& _value )$/;"	f	class:PTAMM::TiXmlElement
SetAttribute	tinyxml.cc	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:PTAMM::TiXmlElement
SetCDATA	tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:PTAMM::TiXmlText
SetCondenseWhiteSpace	tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:PTAMM::TiXmlBase
SetCurrentMap	ARDriver.h	/^    void SetCurrentMap(Map &map) { mpMap = &map; mnCounter = 0; }$/;"	f	class:PTAMM::ARDriver
SetDocument	tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:PTAMM::TiXmlAttribute
SetDoubleAttribute	tinyxml.cc	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:PTAMM::TiXmlElement
SetDoubleValue	tinyxml.cc	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:PTAMM::TiXmlAttribute
SetError	tinyxmlparser.cc	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlDocument
SetImageSize	ATANCamera.cc	/^void ATANCamera::SetImageSize(Vector<2> vImageSize)$/;"	f	class:PTAMM::ATANCamera
SetImageSize	ATANCamera.h	/^    inline void SetImageSize(CVD::ImageRef irImageSize) {SetImageSize(vec(irImageSize));};$/;"	f	class:PTAMM::ATANCamera
SetIndent	tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:PTAMM::TiXmlPrinter
SetIntValue	tinyxml.cc	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:PTAMM::TiXmlAttribute
SetLineBreak	tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:PTAMM::TiXmlPrinter
SetName	tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:PTAMM::TiXmlAttribute
SetName	tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:PTAMM::TiXmlAttribute
SetNewMap	Tracker.cc	/^    void Tracker::SetNewMap(Map * map)$/;"	f	class:PTAMM::Tracker
SetStreamPrinting	tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:PTAMM::TiXmlPrinter
SetSubPixPos	PatchFinder.h	/^  void SetSubPixPos(Vector<2> v2)  { mv2SubPixPos = v2;     }  \/\/ Set starting point$/;"	f	class:PTAMM::PatchFinder
SetTabSize	tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:PTAMM::TiXmlDocument
SetUserData	tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:PTAMM::TiXmlBase
SetValue	tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:PTAMM::TiXmlAttribute
SetValue	tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:PTAMM::TiXmlAttribute
SetValue	tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:PTAMM::TiXmlNode
SetValue	tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:PTAMM::TiXmlNode
SetupFrustum	MapViewer.cc	/^void MapViewer::SetupFrustum()$/;"	f	class:PTAMM::MapViewer
SetupModelView	MapViewer.cc	/^void MapViewer::SetupModelView(SE3<> se3WorldFromCurrent)$/;"	f	class:PTAMM::MapViewer
SetupUnitOrtho	GLWindow2.cc	/^void GLWindow2::SetupUnitOrtho()$/;"	f	class:PTAMM::GLWindow2
SetupVideoOrtho	GLWindow2.cc	/^void GLWindow2::SetupVideoOrtho()$/;"	f	class:PTAMM::GLWindow2
SetupVideoRasterPosAndZoom	GLWindow2.cc	/^void GLWindow2::SetupVideoRasterPosAndZoom()$/;"	f	class:PTAMM::GLWindow2
SetupViewport	GLWindow2.cc	/^void GLWindow2::SetupViewport()$/;"	f	class:PTAMM::GLWindow2
SetupWindowOrtho	GLWindow2.cc	/^const void GLWindow2::SetupWindowOrtho() const$/;"	f	class:PTAMM::GLWindow2
ShooterGame	ShooterGame.cc	/^ShooterGame::ShooterGame()$/;"	f	class:PTAMM::ShooterGame
ShooterGame	ShooterGame.h	/^class ShooterGame : public Game$/;"	c	namespace:PTAMM
ShooterGameTarget	ShooterGameTarget.cc	/^ShooterGameTarget::ShooterGameTarget( TooN::Vector<3> v3Loc, const GLuint & nSphereDisplayList )$/;"	f	class:PTAMM::ShooterGameTarget
ShooterGameTarget	ShooterGameTarget.h	/^class ShooterGameTarget$/;"	c	namespace:PTAMM
Size	VideoSource_Android.cc	/^ImageRef VideoSource::Size()$/;"	f	class:VideoSource
Size	tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:PTAMM::TiXmlPrinter
SkipWhiteSpace	tinyxmlparser.cc	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlBase
Slider	GLWindowMenu.h	/^  enum MenuItemType { Button, Toggle, Monitor, Slider };$/;"	e	enum:PTAMM::GLWindowMenu::MenuItemType
SmallBlurryImage	SmallBlurryImage.cc	/^SmallBlurryImage::SmallBlurryImage()$/;"	f	class:PTAMM::SmallBlurryImage
SmallBlurryImage	SmallBlurryImage.cc	/^SmallBlurryImage::SmallBlurryImage(const KeyFrame &kf, double dBlur)$/;"	f	class:PTAMM::SmallBlurryImage
SmallBlurryImage	SmallBlurryImage.h	/^class SmallBlurryImage$/;"	c	namespace:PTAMM
Source	KeyFrame.h	/^  enum {SRC_TRACKER, SRC_REFIND, SRC_ROOT, SRC_TRAIL, SRC_EPIPOLAR} Source; \/\/ Where has this measurement come frome?$/;"	m	struct:PTAMM::Measurement	typeref:enum:PTAMM::Measurement::__anon1
SquareRootWeight	MEstimator.h	/^inline double Cauchy::SquareRootWeight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Cauchy
SquareRootWeight	MEstimator.h	/^inline double Huber::SquareRootWeight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Huber
SquareRootWeight	MEstimator.h	/^inline double LeastSquares::SquareRootWeight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::LeastSquares
SquareRootWeight	MEstimator.h	/^inline double Tukey::SquareRootWeight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Tukey
Stamp	tinyxmlparser.cc	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlParsingData
Standalone	tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:PTAMM::TiXmlDeclaration
StartMapSerialization	System.cc	/^void System::StartMapSerialization(std::string sCommand, std::string sParams)$/;"	f	class:PTAMM::System
Str	tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:PTAMM::TiXmlPrinter
StreamIn	tinyxmlparser.cc	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlComment
StreamIn	tinyxmlparser.cc	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlDeclaration
StreamIn	tinyxmlparser.cc	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlDocument
StreamIn	tinyxmlparser.cc	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:PTAMM::TiXmlElement
StreamIn	tinyxmlparser.cc	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlText
StreamIn	tinyxmlparser.cc	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlUnknown
StreamTo	tinyxmlparser.cc	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlBase
StreamWhiteSpace	tinyxmlparser.cc	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:PTAMM::TiXmlBase
Strength	ShooterGameTarget.h	/^    int & Strength() { return mnStrength; }  \/\/\/ Get or set the strength of the target$/;"	f	class:PTAMM::ShooterGameTarget
StringEqual	tinyxmlparser.cc	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:PTAMM::TiXmlBase
SubMenu	GLWindowMenu.h	/^  struct SubMenu$/;"	s	class:PTAMM::GLWindowMenu
SumXMM_16	PatchFinder.cc	/^inline int SumXMM_16(__m128i &target)$/;"	f	namespace:PTAMM
SumXMM_32	PatchFinder.cc	/^inline int SumXMM_32(__m128i &target)$/;"	f	namespace:PTAMM
SwitchDone	MapMaker.cc	/^    bool MapMaker::SwitchDone()$/;"	f	class:PTAMM::MapMaker
SwitchMap	MapMaker.cc	/^    void MapMaker::SwitchMap()$/;"	f	class:PTAMM::MapMaker
SwitchMap	MapViewer.cc	/^void MapViewer::SwitchMap( Map * map, bool bForce )$/;"	f	class:PTAMM::MapViewer
SwitchMap	System.cc	/^bool System::SwitchMap( int nMapNum, bool bForce )$/;"	f	class:PTAMM::System
SwitchMap	Tracker.cc	/^    bool Tracker::SwitchMap(Map *map)$/;"	f	class:PTAMM::Tracker
System	System.cc	/^System::System()$/;"	f	class:PTAMM::System
System	System.h	/^class System$/;"	c	namespace:PTAMM
TEXT	tinyxml.h	/^		TEXT,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
TIMER_H	timer.h	13;"	d
TIMER_INIT	Timing.h	40;"	d
TIMER_INIT	Timing.h	50;"	d
TIMER_INIT	Timing.h	61;"	d
TIMER_START	Timing.h	43;"	d
TIMER_START	Timing.h	51;"	d
TIMER_START	Timing.h	62;"	d
TIMER_STOP	Timing.h	47;"	d
TIMER_STOP	Timing.h	54;"	d
TIMER_STOP	Timing.h	56;"	d
TIMER_STOP	Timing.h	63;"	d
TIME_BEGIN	timer.h	32;"	d
TIME_END	timer.h	33;"	d
TINYXML_INCLUDED	tinyxml.h	28;"	d
TIXML_DEFAULT_ENCODING	tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	m	namespace:PTAMM
TIXML_ENCODING_LEGACY	tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:PTAMM::TiXmlEncoding
TIXML_ENCODING_UNKNOWN	tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:PTAMM::TiXmlEncoding
TIXML_ENCODING_UTF8	tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:PTAMM::TiXmlEncoding
TIXML_ERROR	tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_DOCUMENT_EMPTY	tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_DOCUMENT_TOP_ONLY	tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_EMBEDDED_NULL	tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_OPENING_FILE	tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_OUT_OF_MEMORY	tinyxml.h	/^		TIXML_ERROR_OUT_OF_MEMORY,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_CDATA	tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_COMMENT	tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_DECLARATION	tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_ELEMENT	tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_EMPTY	tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_PARSING_UNKNOWN	tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_READING_ATTRIBUTES	tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_READING_ELEMENT_VALUE	tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_READING_END_TAG	tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_ERROR_STRING_COUNT	tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_LOG	tinyxmlparser.cc	34;"	d	file:
TIXML_LOG	tinyxmlparser.cc	36;"	d	file:
TIXML_MAJOR_VERSION	tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	m	namespace:PTAMM
TIXML_MINOR_VERSION	tinyxml.h	/^const int TIXML_MINOR_VERSION = 5;$/;"	m	namespace:PTAMM
TIXML_NO_ATTRIBUTE	tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:PTAMM::__anon3
TIXML_NO_ERROR	tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:PTAMM::TiXmlBase::__anon4
TIXML_PATCH_VERSION	tinyxml.h	/^const int TIXML_PATCH_VERSION = 3;$/;"	m	namespace:PTAMM
TIXML_SAFE	tinyxml.h	61;"	d
TIXML_SNPRINTF	tinyxml.h	66;"	d
TIXML_SNPRINTF	tinyxml.h	72;"	d
TIXML_SNPRINTF	tinyxml.h	78;"	d
TIXML_SNSCANF	tinyxml.h	67;"	d
TIXML_SNSCANF	tinyxml.h	73;"	d
TIXML_SNSCANF	tinyxml.h	79;"	d
TIXML_SSCANF	tinyxml.h	68;"	d
TIXML_SSCANF	tinyxml.h	74;"	d
TIXML_SSCANF	tinyxml.h	80;"	d
TIXML_SSCANF	tinyxml.h	82;"	d
TIXML_STRING	tinyxml.h	51;"	d
TIXML_STRING	tinyxml.h	54;"	d
TIXML_SUCCESS	tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:PTAMM::__anon3
TIXML_USE_STL	tinyxml.h	25;"	d
TIXML_UTF_LEAD_0	tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	m	namespace:PTAMM	file:
TIXML_UTF_LEAD_1	tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	m	namespace:PTAMM	file:
TIXML_UTF_LEAD_2	tinyxmlparser.cc	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	m	namespace:PTAMM	file:
TIXML_WRONG_TYPE	tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:PTAMM::__anon3
TPrediction	Tracker.h	/^  Vector<3> TPrediction;$/;"	m	class:PTAMM::Tracker
TRAIL_TRACKING_COMPLETE	Tracker.h	/^	TRAIL_TRACKING_COMPLETE} mnInitialStage;  \/\/ How far are we towards making the initial map?$/;"	e	enum:PTAMM::Tracker::__anon6
TRAIL_TRACKING_NOT_STARTED	Tracker.h	/^  enum {TRAIL_TRACKING_NOT_STARTED, $/;"	e	enum:PTAMM::Tracker::__anon6
TRAIL_TRACKING_STARTED	Tracker.h	/^	TRAIL_TRACKING_STARTED, $/;"	e	enum:PTAMM::Tracker::__anon6
TYPECOUNT	tinyxml.h	/^		TYPECOUNT$/;"	e	enum:PTAMM::TiXmlNode::NodeType
TabSize	tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:PTAMM::TiXmlDocument
TemplateBad	PatchFinder.h	/^  inline bool TemplateBad()      { return mbTemplateBad;} $/;"	f	class:PTAMM::PatchFinder
Text	tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:PTAMM::TiXmlHandle
ThinCandidates	MapMaker.cc	/^    void MapMaker::ThinCandidates(KeyFrame &k, int nLevel)$/;"	f	class:PTAMM::MapMaker
TiXmlAttribute	tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:PTAMM::TiXmlAttribute
TiXmlAttribute	tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:PTAMM::TiXmlAttribute
TiXmlAttribute	tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:PTAMM::TiXmlAttribute
TiXmlAttribute	tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c	namespace:PTAMM
TiXmlAttributeSet	tinyxml.cc	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:PTAMM::TiXmlAttributeSet
TiXmlAttributeSet	tinyxml.h	/^class TiXmlAttributeSet$/;"	c	namespace:PTAMM
TiXmlBase	tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:PTAMM::TiXmlBase
TiXmlBase	tinyxml.h	/^class TiXmlBase$/;"	c	namespace:PTAMM
TiXmlComment	tinyxml.cc	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::COMMENT )$/;"	f	class:PTAMM::TiXmlComment
TiXmlComment	tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::COMMENT ) {$/;"	f	class:PTAMM::TiXmlComment
TiXmlComment	tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::COMMENT ) {}$/;"	f	class:PTAMM::TiXmlComment
TiXmlComment	tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlCursor	tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:PTAMM::TiXmlCursor
TiXmlCursor	tinyxml.h	/^struct TiXmlCursor$/;"	s	namespace:PTAMM
TiXmlDeclaration	tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:PTAMM::TiXmlDeclaration
TiXmlDeclaration	tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:PTAMM::TiXmlDeclaration
TiXmlDeclaration	tinyxml.cc	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:PTAMM::TiXmlDeclaration
TiXmlDeclaration	tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::DECLARATION ) {}$/;"	f	class:PTAMM::TiXmlDeclaration
TiXmlDeclaration	tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlDocument	tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:PTAMM::TiXmlDocument
TiXmlDocument	tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:PTAMM::TiXmlDocument
TiXmlDocument	tinyxml.cc	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:PTAMM::TiXmlDocument
TiXmlDocument	tinyxml.cc	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::DOCUMENT )$/;"	f	class:PTAMM::TiXmlDocument
TiXmlDocument	tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlElement	tinyxml.cc	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:PTAMM::TiXmlElement
TiXmlElement	tinyxml.cc	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:PTAMM::TiXmlElement
TiXmlElement	tinyxml.cc	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:PTAMM::TiXmlElement
TiXmlElement	tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlEncoding	tinyxml.h	/^enum TiXmlEncoding$/;"	g	namespace:PTAMM
TiXmlFOpen	tinyxml.cc	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f	namespace:PTAMM
TiXmlHandle	tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:PTAMM::TiXmlHandle
TiXmlHandle	tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:PTAMM::TiXmlHandle
TiXmlHandle	tinyxml.h	/^class TiXmlHandle$/;"	c	namespace:PTAMM
TiXmlNode	tinyxml.cc	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:PTAMM::TiXmlNode
TiXmlNode	tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c	namespace:PTAMM
TiXmlParsingData	tinyxmlparser.cc	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:PTAMM::TiXmlParsingData	file:
TiXmlParsingData	tinyxmlparser.cc	/^class TiXmlParsingData$/;"	c	namespace:PTAMM	file:
TiXmlPrinter	tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:PTAMM::TiXmlPrinter
TiXmlPrinter	tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c	namespace:PTAMM
TiXmlText	tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:PTAMM::TiXmlText
TiXmlText	tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:PTAMM::TiXmlText
TiXmlText	tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TEXT)$/;"	f	class:PTAMM::TiXmlText
TiXmlText	tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlUnknown	tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:PTAMM::TiXmlUnknown
TiXmlUnknown	tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::UNKNOWN )	{}$/;"	f	class:PTAMM::TiXmlUnknown
TiXmlUnknown	tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c	namespace:PTAMM
TiXmlVisitor	tinyxml.h	/^class TiXmlVisitor$/;"	c	namespace:PTAMM
ToComment	tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToComment	tinyxml.h	/^	virtual TiXmlComment*  ToComment() { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlComment
ToComment	tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToComment	tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlComment
ToDeclaration	tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlDeclaration
ToDeclaration	tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToDeclaration	tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToDeclaration	tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlDeclaration
ToDocument	tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlDocument
ToDocument	tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToDocument	tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToDocument	tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlDocument
ToElement	tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:PTAMM::TiXmlHandle
ToElement	tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlElement
ToElement	tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToElement	tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToElement	tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlElement
ToLower	tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:PTAMM::TiXmlBase
ToNode	tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:PTAMM::TiXmlHandle
ToText	tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:PTAMM::TiXmlHandle
ToText	tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToText	tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlText
ToText	tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToText	tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlText
ToUnknown	tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:PTAMM::TiXmlHandle
ToUnknown	tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToUnknown	tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlUnknown
ToUnknown	tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:PTAMM::TiXmlNode
ToUnknown	tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:PTAMM::TiXmlUnknown
Toggle	GLWindowMenu.h	/^  enum MenuItemType { Button, Toggle, Monitor, Slider };$/;"	e	enum:PTAMM::GLWindowMenu::MenuItemType
ToggleAR_cb	ModelControls.cc	/^void ToggleAR_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
ToggleControls_cb	ModelControls.cc	/^void ToggleControls_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
TogglePoints_cb	ModelControls.cc	/^void TogglePoints_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
ToggleSnapTo_cb	ModelControls.cc	/^void ToggleSnapTo_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
TrackForInitialMap	Tracker.cc	/^    void Tracker::TrackForInitialMap()$/;"	f	class:PTAMM::Tracker
TrackFrame	Tracker.cc	/^    void Tracker::TrackFrame(Image<CVD::byte> &imFrame, float* q, bool bDraw)$/;"	f	class:PTAMM::Tracker
TrackMap	Tracker.cc	/^    void Tracker::TrackMap()$/;"	f	class:PTAMM::Tracker
Tracker	Tracker.cc	/^    Tracker::Tracker(ImageRef irVideoSize, const ATANCamera &c, std::vector<Map*> &maps, Map *m, MapMaker &mm) :$/;"	f	class:PTAMM::Tracker
Tracker	Tracker.h	/^class Tracker$/;"	c	namespace:PTAMM
TrackerData	TrackerData.h	/^TrackerData(MapPoint *pMapPoint) $/;"	f	struct:PTAMM::TrackerData
TrackerData	TrackerData.h	/^struct TrackerData$/;"	s	namespace:PTAMM
Trail	Tracker.h	/^struct Trail    \/\/ This struct is used for initial correspondences of the first stereo pair.$/;"	s	namespace:PTAMM
TrailTracking_Advance	Tracker.cc	/^    int Tracker::TrailTracking_Advance()$/;"	f	class:PTAMM::Tracker
TrailTracking_Start	Tracker.cc	/^    void Tracker::TrailTracking_Start()$/;"	f	class:PTAMM::Tracker
Tukey	MEstimator.h	/^struct Tukey$/;"	s	namespace:PTAMM
Type	tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:PTAMM::TiXmlNode
U	yuv2rgb.c	/^static long U[256], V[256], Y1[256], Y2[256];$/;"	v	file:
UFBLinearProject	ATANCamera.h	/^inline Vector<2> ATANCamera::UFBLinearProject(const Vector<2>& camframe)$/;"	f	class:PTAMM::ATANCamera
UFBLinearUnProject	ATANCamera.h	/^inline Vector<2> ATANCamera::UFBLinearUnProject(const Vector<2>& fbframe)$/;"	f	class:PTAMM::ATANCamera
UFBProject	ATANCamera.cc	/^Vector<2> ATANCamera::UFBProject(const Vector<2>& vCam)$/;"	f	class:PTAMM::ATANCamera
UFBUnProject	ATANCamera.cc	/^Vector<2> ATANCamera::UFBUnProject(const Vector<2>& v2Im)$/;"	f	class:PTAMM::ATANCamera
UNKNOWN	tinyxml.h	/^		UNKNOWN,$/;"	e	enum:PTAMM::TiXmlNode::NodeType
UnProject	ATANCamera.cc	/^Vector<2> ATANCamera::UnProject(const Vector<2>& v2Im)$/;"	f	class:PTAMM::ATANCamera
UnProject	ATANCamera.h	/^    inline Vector<2> UnProject(CVD::ImageRef ir)  { return UnProject(vec(ir)); }$/;"	f	class:PTAMM::ATANCamera
UnRegister	MapLockManager.cc	/^void MapLockManager::UnRegister( void * t)$/;"	f	class:PTAMM::MapLockManager
Unknown	tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:PTAMM::TiXmlHandle
UnlockMap	MapLockManager.cc	/^bool MapLockManager::UnlockMap( void * t)$/;"	f	class:PTAMM::MapLockManager
Update	ShooterGameTarget.cc	/^void ShooterGameTarget::Update()$/;"	f	class:PTAMM::ShooterGameTarget
UpdateIMUModel	Tracker.cc	/^    void Tracker::UpdateIMUModel()$/;"	f	class:PTAMM::Tracker
UpdateMotionModel	Tracker.cc	/^    void Tracker::UpdateMotionModel()$/;"	f	class:PTAMM::Tracker
UpdateParams	ATANCamera.cc	/^void ATANCamera::UpdateParams(Vector<5> vUpdate)$/;"	f	class:PTAMM::ATANCamera
V	yuv2rgb.c	/^static long U[256], V[256], Y1[256], Y2[256];$/;"	v	file:
Value	tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:PTAMM::TiXmlNode
Value	tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:PTAMM::TiXmlAttribute
ValueStr	tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:PTAMM::TiXmlAttribute
ValueStr	tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:PTAMM::TiXmlNode
ValueTStr	tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:PTAMM::TiXmlNode
Vector3D	Model3ds.h	/^typedef float Vector3D[3];  \/\/for use with lib3ds$/;"	t	namespace:PTAMM
Version	tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:PTAMM::TiXmlDeclaration
VidFromWinCoords	GLWindow2.cc	/^Vector<2> GLWindow2::VidFromWinCoords( CVD::ImageRef irWin )$/;"	f	class:PTAMM::GLWindow2
VideoSource	VideoSource.h	/^class VideoSource$/;"	c	namespace:PTAMM
VideoSource	VideoSource_Android.cc	/^VideoSource::VideoSource()$/;"	f	class:VideoSource
ViewCurrentMap	MapViewer.cc	/^void MapViewer::ViewCurrentMap()$/;"	f	class:PTAMM::MapViewer
ViewNextMap	MapViewer.cc	/^void MapViewer::ViewNextMap()$/;"	f	class:PTAMM::MapViewer
ViewPrevMap	MapViewer.cc	/^void MapViewer::ViewPrevMap()$/;"	f	class:PTAMM::MapViewer
Visit	tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:PTAMM::TiXmlPrinter
Visit	tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:PTAMM::TiXmlPrinter
Visit	tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:PTAMM::TiXmlPrinter
Visit	tinyxml.cc	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:PTAMM::TiXmlPrinter
Visit	tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
Visit	tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
Visit	tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
Visit	tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
VisitEnter	tinyxml.cc	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:PTAMM::TiXmlPrinter
VisitEnter	tinyxml.cc	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:PTAMM::TiXmlPrinter
VisitEnter	tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
VisitEnter	tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
VisitExit	tinyxml.cc	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:PTAMM::TiXmlPrinter
VisitExit	tinyxml.cc	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:PTAMM::TiXmlPrinter
VisitExit	tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
VisitExit	tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:PTAMM::TiXmlVisitor
WIN32_LEAN_AND_MEAN	MapMaker.cc	25;"	d	file:
WIN32_LEAN_AND_MEAN	OpenGL.h	16;"	d
WIN32_LEAN_AND_MEAN	Timing.h	15;"	d
WIN32_LEAN_AND_MEAN	Timing.h	36;"	d
Weight	MEstimator.h	/^inline double Cauchy::Weight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Cauchy
Weight	MEstimator.h	/^inline double Huber::Weight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Huber
Weight	MEstimator.h	/^inline double LeastSquares::Weight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::LeastSquares
Weight	MEstimator.h	/^inline double Tukey::Weight(double dErrorSquared, double dSigmaSquared)$/;"	f	class:PTAMM::Tukey
Y1	yuv2rgb.c	/^static long U[256], V[256], Y1[256], Y2[256];$/;"	v	file:
Y2	yuv2rgb.c	/^static long U[256], V[256], Y1[256], Y2[256];$/;"	v	file:
YUV420P	yuv2rgb.h	/^    YUV420P = 0xffff0001,$/;"	e	enum:__anon8
YUV422P	yuv2rgb.h	/^    YUV422P = 0xffff0002,$/;"	e	enum:__anon8
YUV422SP	yuv2rgb.h	/^	YUV422SP = 0xfff0003,$/;"	e	enum:__anon8
YUV_TYPE	yuv2rgb.h	/^}YUV_TYPE;$/;"	t	typeref:enum:__anon8
YUVtoRGB	ptam-main.cc	/^void YUVtoRGB(unsigned char *yuv, unsigned char *rgbData, int width, int height)$/;"	f
YawDecrease	Model3ds.cc	/^void Model3DS::YawDecrease()$/;"	f	class:PTAMM::Model3DS
YawDecrease_cb	ModelControls.cc	/^void YawDecrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
YawIncrease	Model3ds.cc	/^void Model3DS::YawIncrease()$/;"	f	class:PTAMM::Model3DS
YawIncrease_cb	ModelControls.cc	/^void YawIncrease_cb( ModelsGameData & data )$/;"	f	namespace:PTAMM
ZMSSD	SmallBlurryImage.cc	/^double SmallBlurryImage::ZMSSD(SmallBlurryImage &other)$/;"	f	class:PTAMM::SmallBlurryImage
ZMSSDAtPoint	PatchFinder.cc	/^int PatchFinder::ZMSSDAtPoint(CVD::BasicImage<CVD::byte> &im, const CVD::ImageRef &ir)$/;"	f	class:PTAMM::PatchFinder
_AssignProperties	ShooterGameTarget.cc	/^void ShooterGameTarget::_AssignProperties()$/;"	f	class:PTAMM::ShooterGameTarget
_CleanUp	MapSerializer.cc	/^void MapSerializer::_CleanUp()$/;"	f	class:PTAMM::MapSerializer
_CreateInitialTargets	ShooterGame.cc	/^void ShooterGame::_CreateInitialTargets()$/;"	f	class:PTAMM::ShooterGame
_CreateSaveLUTs	MapSerializer.cc	/^void MapSerializer::_CreateSaveLUTs()$/;"	f	class:PTAMM::MapSerializer
_CrossReferencing	MapSerializer.cc	/^bool MapSerializer::_CrossReferencing(TiXmlHandle &hRoot)$/;"	f	class:PTAMM::MapSerializer
_DelayedLoad	Model3ds.cc	/^void Model3DS::_DelayedLoad()$/;"	f	class:PTAMM::Model3DS
_DrawAxes	Model3ds.cc	/^void Model3DS::_DrawAxes()$/;"	f	class:PTAMM::Model3DS
_DrawAxes	ModelsGame.cc	/^void ModelsGame::_DrawAxes()$/;"	f	class:PTAMM::ModelsGame
_DrawBoundingBox	Model3ds.cc	/^void Model3DS::_DrawBoundingBox()$/;"	f	class:PTAMM::Model3DS
_DrawFillBox	MGButton.cc	/^void MGButton::_DrawFillBox()$/;"	f	class:PTAMM::MGButton
_DrawLineBox	MGButton.cc	/^void MGButton::_DrawLineBox()$/;"	f	class:PTAMM::MGButton
_DrawSelectedTarget	ModelsGame.cc	/^void ModelsGame::_DrawSelectedTarget()$/;"	f	class:PTAMM::ModelsGame
_FindBoundingBox	Model3ds.cc	/^void Model3DS::_FindBoundingBox( Lib3dsFile * pModel )$/;"	f	class:PTAMM::Model3DS
_FindTheMap	MapSerializer.cc	/^Map * MapSerializer::_FindTheMap( std::string sParam )$/;"	f	class:PTAMM::MapSerializer
_GAMES_H_	Games.h	14;"	d
_GenerateDisplayList	Model3ds.cc	/^GLuint Model3DS::_GenerateDisplayList( Lib3dsFile * pModel, bool bWireframe )$/;"	f	class:PTAMM::Model3DS
_HandleModelBrowserActions	ModelsGame.cc	/^bool ModelsGame::_HandleModelBrowserActions( Vector<2> v2VidCoords )$/;"	f	class:PTAMM::ModelsGame
_Load	Model3ds.cc	/^bool Model3DS::_Load()$/;"	f	class:PTAMM::Model3DS
_LoadAKeyFrame	MapSerializer.cc	/^bool MapSerializer::_LoadAKeyFrame( TiXmlHandle &phKF, const std::string & sPath, bool bQueueFrame )$/;"	f	class:PTAMM::MapSerializer
_LoadAMapPoint	MapSerializer.cc	/^bool MapSerializer::_LoadAMapPoint( TiXmlHandle &hMP, bool bQueuePoint )$/;"	f	class:PTAMM::MapSerializer
_LoadKeyFrames	MapSerializer.cc	/^bool MapSerializer::_LoadKeyFrames( TiXmlHandle &hRoot, const std::string & sPath )$/;"	f	class:PTAMM::MapSerializer
_LoadMap	MapSerializer.cc	/^MapSerializer::MapStatus MapSerializer::_LoadMap( std::string sDirName )$/;"	f	class:PTAMM::MapSerializer
_LoadMapPoints	MapSerializer.cc	/^bool MapSerializer::_LoadMapPoints( TiXmlHandle &hRoot )$/;"	f	class:PTAMM::MapSerializer
_LoadTextures	Model3ds.cc	/^void Model3DS::_LoadTextures( Lib3dsFile * pModel )$/;"	f	class:PTAMM::Model3DS
_LockMap	MapSerializer.cc	/^bool MapSerializer::_LockMap()$/;"	f	class:PTAMM::MapSerializer
_LookupKeyFrame	MapSerializer.cc	/^KeyFrame * MapSerializer::_LookupKeyFrame( int uid )$/;"	f	class:PTAMM::MapSerializer
_LookupKeyFrame	MapSerializer.cc	/^int MapSerializer::_LookupKeyFrame( KeyFrame * k )$/;"	f	class:PTAMM::MapSerializer
_LookupMapPoint	MapSerializer.cc	/^MapPoint * MapSerializer::_LookupMapPoint( int uid )$/;"	f	class:PTAMM::MapSerializer
_LookupMapPoint	MapSerializer.cc	/^int MapSerializer::_LookupMapPoint( MapPoint * m )$/;"	f	class:PTAMM::MapSerializer
_ParseCommandAndParameters	MapSerializer.cc	/^Map * MapSerializer::_ParseCommandAndParameters()$/;"	f	class:PTAMM::MapSerializer
_ParseModelDB	ModelBrowser.cc	/^bool ModelBrowser::_ParseModelDB()$/;"	f	class:PTAMM::ModelBrowser
_RegisterWithMap	MapSerializer.cc	/^void MapSerializer::_RegisterWithMap(Map * pMap)$/;"	f	class:PTAMM::MapSerializer
_ResetGameState	ShooterGame.cc	/^void ShooterGame::_ResetGameState()$/;"	f	class:PTAMM::ShooterGame
_SaveAKeyFrame	MapSerializer.cc	/^bool MapSerializer::_SaveAKeyFrame( KeyFrame * kf, const std::string & sPath, TiXmlElement * keyFramesNode )$/;"	f	class:PTAMM::MapSerializer
_SaveAMapPoint	MapSerializer.cc	/^bool MapSerializer::_SaveAMapPoint( MapPoint * mp, TiXmlElement * mapPointsNode )$/;"	f	class:PTAMM::MapSerializer
_SaveKeyFrames	MapSerializer.cc	/^bool MapSerializer::_SaveKeyFrames( const std::string &sPath, TiXmlElement * rootNode )$/;"	f	class:PTAMM::MapSerializer
_SaveMap	MapSerializer.cc	/^MapSerializer::MapStatus MapSerializer::_SaveMap( std::string sPath )$/;"	f	class:PTAMM::MapSerializer
_SaveMapPoints	MapSerializer.cc	/^bool MapSerializer::_SaveMapPoints( TiXmlElement * rootNode )$/;"	f	class:PTAMM::MapSerializer
_SelectClosestMapPoint	ModelsGame.cc	/^Vector<3> ModelsGame::_SelectClosestMapPoint( Vector<3> v3RayDirnW )$/;"	f	class:PTAMM::ModelsGame
_SetupCategoryPages	ModelBrowser.cc	/^void ModelBrowser::_SetupCategoryPages( Pages & pages, const std::vector< CategoryData > & vCategories )$/;"	f	class:PTAMM::ModelBrowser
_SetupModelPages	ModelBrowser.cc	/^void ModelBrowser::_SetupModelPages( Pages & pages, const std::vector< ModelData > & vModels )$/;"	f	class:PTAMM::ModelBrowser
_UnRegisterWithMap	MapSerializer.cc	/^void MapSerializer::_UnRegisterWithMap()$/;"	f	class:PTAMM::MapSerializer
_UnlockMap	MapSerializer.cc	/^void MapSerializer::_UnlockMap()$/;"	f	class:PTAMM::MapSerializer
_YUV2RGB_H_	yuv2rgb.h	55;"	d
__AR_Driver_H	ARDriver.h	12;"	d
__ATAN_CAMERA_H	ATANCamera.h	45;"	d
__BUNDLE_H	Bundle.h	4;"	d
__CALIB_CORNER_PATCH_H	CalibCornerPatch.h	5;"	d
__CALIB_IMAGE_H	CalibImage.h	5;"	d
__CAMERACALIBRATOR_H	CameraCalibrator.h	5;"	d
__EYEGAME_H	EyeGame.h	11;"	d
__GAME_H	Game.h	8;"	d
__GL_WINDOW_2_H	GLWindow2.h	4;"	d
__GL_WINDOW_MENU_H	GLWindowMenu.h	5;"	d
__HOMOGRAPHY_INIT_H	HomographyInit.h	14;"	d
__KEYFRAME_H	KeyFrame.h	19;"	d
__LEVEL_HELPERS_H	LevelHelpers.h	10;"	d
__MAPMAKER_H	MapMaker.h	15;"	d
__MAP_H	Map.h	16;"	d
__MAP_LOCK_MANAGER__	MapLockManager.h	13;"	d
__MAP_POINT_H	MapPoint.h	15;"	d
__MAP_SERIALIZER__	MapSerializer.h	13;"	d
__MAP_VIEWER_H	MapViewer.h	12;"	d
__MESTIMATOR_H	MEstimator.h	11;"	d
__MINI_PATCH_H	MiniPatch.h	12;"	d
__OPENGL_INCLUDES_H	OpenGL.h	3;"	d
__PATCHFINDER_H	PatchFinder.h	38;"	d
__PTAMM_UTILS__	Utils.h	12;"	d
__RELOCALISER_H	Relocaliser.h	15;"	d
__SHI_TOMASI__H	ShiTomasi.h	3;"	d
__SMALLBLURRYIMAGE_H	SmallBlurryImage.h	8;"	d
__SMALL_MATRIX_OPTS	SmallMatrixOpts.h	7;"	d
__SYSTEM_H	System.h	12;"	d
__TIMING__	Timing.h	3;"	d
__TRACKERDATA_H	TrackerData.h	4;"	d
__TRACKER_H	Tracker.h	22;"	d
__VideoSource_H	VideoSource.h	16;"	d
aLevels	KeyFrame.h	/^    Level aLevels[LEVELS];  \/\/ Images, corners, etc lives in this array of pyramid levels$/;"	m	class:PTAMM::KeyFrame
aNeighborStates	CalibImage.h	/^  NeighborState aNeighborStates[4];$/;"	m	struct:PTAMM::CalibGridCorner
ase3WorldFromEye	EyeGame.h	/^    SE3<> ase3WorldFromEye[4];                \/\/ The locations of the eyes$/;"	m	class:PTAMM::EyeGame
attributeSet	tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:PTAMM::TiXmlElement
bBad	Bundle.h	/^  bool bBad;$/;"	m	struct:PTAMM::Meas
bBad	MapPoint.h	/^  bool bBad;$/;"	m	struct:PTAMM::MapPoint
bBundleConverged_Full	Map.h	/^    bool bBundleConverged_Full;                      \/\/ Has global bundle adjustment converged?$/;"	m	class:PTAMM::Map
bBundleConverged_Recent	Map.h	/^    bool bBundleConverged_Recent;                    \/\/ Has local bundle adjustment converged?$/;"	m	class:PTAMM::Map
bDidSubPix	TrackerData.h	/^  bool bDidSubPix;$/;"	m	struct:PTAMM::TrackerData
bDrawAR	System.h	/^    bool bDrawAR;$/;"	m	class:PTAMM::System
bEditLocked	Map.h	/^    bool bEditLocked;                                \/\/ Is the map locked from being edited?$/;"	m	class:PTAMM::Map
bFixed	Bundle.h	/^  bool bFixed;$/;"	m	struct:PTAMM::Camera
bFixed	KeyFrame.h	/^    bool bFixed;      \/\/ Is the coordinate frame of this keyframe fixed? (only true for first KF!)$/;"	m	class:PTAMM::KeyFrame
bFound	TrackerData.h	/^  bool bFound;$/;"	m	struct:PTAMM::TrackerData
bGood	Map.h	/^    bool bGood;                                   \/\/ Is the map valid (has content)?$/;"	m	class:PTAMM::Map
bImplaneCornersCached	KeyFrame.h	/^  bool bImplaneCornersCached;           \/\/ Also keep image-plane (z=1) positions of FAST corners to speed up epipolar search$/;"	m	struct:PTAMM::Level
bInImage	TrackerData.h	/^  bool bInImage;        $/;"	m	struct:PTAMM::TrackerData
bPotentiallyVisible	TrackerData.h	/^  bool bPotentiallyVisible;$/;"	m	struct:PTAMM::TrackerData
bRender	System.h	/^    bool bRender;$/;"	m	class:PTAMM::System
bSearched	TrackerData.h	/^  bool bSearched;$/;"	m	struct:PTAMM::TrackerData
bSubPix	KeyFrame.h	/^  bool bSubPix; \/\/ Has this measurement been refined to sub-pixel level?$/;"	m	struct:PTAMM::Measurement
buffer	MD5.h	/^  unsigned char buffer[64];        \/* input buffer *\/$/;"	m	struct:PTAMM::__anon2
buffer	tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:PTAMM::TiXmlPrinter
c	Bundle.h	/^  int c; \/\/ The camera - called j in MVG$/;"	m	struct:PTAMM::Meas
cachedfdir	ptam-main.cc	/^bool cachedfdir = false;$/;"	v
cbu_tab	yuv2rgb.c	/^static long int cbu_tab[256];$/;"	v	file:
cdata	tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:PTAMM::TiXmlText
cerrbackup	ptam-main.cc	/^std::streambuf *psbuf, *coutbackup, *cerrbackup;$/;"	v
cgu_tab	yuv2rgb.c	/^static long int cgu_tab[256];$/;"	v	file:
cgv_tab	yuv2rgb.c	/^static long int cgv_tab[256];$/;"	v	file:
changeBrightness	ptam-main.cc	/^JNICALL void VideoSource::changeBrightness(int change)$/;"	f	class:VideoSource
chr	tinyxml.h	/^		char		    chr;$/;"	m	struct:PTAMM::TiXmlBase::Entity
clp	yuv2rgb.c	/^static unsigned char clp[1024];   \/\/for clip in CCIR601$/;"	v	file:
col	tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:PTAMM::TiXmlCursor
condenseWhiteSpace	tinyxml.cc	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:PTAMM::TiXmlBase	file:
condenseWhiteSpace	tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:PTAMM::TiXmlBase
convToString	MD5Wrapper.cc	/^std::string MD5Wrapper::convToString(unsigned char *bytes)$/;"	f	class:PTAMM::MD5Wrapper
count	MD5.h	/^  unsigned long int count[2];      \/* number of bits, modulo 2^64 (lsb first) *\/$/;"	m	struct:PTAMM::__anon2
cout	Bundle.cc	19;"	d	file:
coutbackup	ptam-main.cc	/^std::streambuf *psbuf, *coutbackup, *cerrbackup;$/;"	v
crv_tab	yuv2rgb.c	/^static long int crv_tab[256];$/;"	v	file:
cursor	tinyxmlparser.cc	/^	TiXmlCursor		cursor;$/;"	m	class:PTAMM::TiXmlParsingData	file:
d	HomographyInit.h	/^  double d;$/;"	m	struct:PTAMM::HomographyDecomposition
dCreationTime	MapPoint.h	/^  double dCreationTime; \/\/timer.get_time() time of creation$/;"	m	struct:PTAMM::MapPoint
dErrorSquared	Bundle.h	/^  double dErrorSquared;$/;"	m	struct:PTAMM::Meas
dGain	CalibCornerPatch.h	/^    double dGain;$/;"	m	struct:PTAMM::CalibCornerPatch::Params
dMean	CalibCornerPatch.h	/^    double dMean;$/;"	m	struct:PTAMM::CalibCornerPatch::Params
dSTScore	KeyFrame.h	/^  double dSTScore;$/;"	m	struct:PTAMM::Candidate
dSceneDepthMean	KeyFrame.h	/^    double dSceneDepthMean;      \/\/ Hacky hueristics to improve epipolar search.$/;"	m	class:PTAMM::KeyFrame
dSceneDepthSigma	KeyFrame.h	/^    double dSceneDepthSigma;$/;"	m	class:PTAMM::KeyFrame
dSqrtInvNoise	Bundle.h	/^  double dSqrtInvNoise;$/;"	m	struct:PTAMM::Meas
dSqrtInvNoise	TrackerData.h	/^  double dSqrtInvNoise;   \/\/ Only depends on search level..$/;"	m	struct:PTAMM::TrackerData
dVelocity	ShooterGame.h	/^    double dVelocity;$/;"	m	struct:PTAMM::Bullet
data	ModelBrowser.h	/^    const ModelData & data;                   \/\/ The model data$/;"	m	class:PTAMM::ModelItem
depth	tinyxml.h	/^	int depth;$/;"	m	class:PTAMM::TiXmlPrinter
docalibration	ptam-main.cc	/^bool docalibration = false;$/;"	v
document	tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:PTAMM::TiXmlAttribute
drawTextJava	ptam-main.cc	/^JNICALL const void PTAMM::GLWindow2::drawTextJava(std::string s,CVD::ImageRef irPos, int shaderid) const{$/;"	f	class:PTAMM::GLWindow2
encoding	tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:PTAMM::TiXmlDeclaration
entity	tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:PTAMM::TiXmlBase
entity	tinyxmlparser.cc	/^TiXmlBase::Entity TiXmlBase::entity[ NUM_ENTITY ] = $/;"	m	class:PTAMM::TiXmlBase	file:
error	tinyxml.h	/^	bool error;$/;"	m	class:PTAMM::TiXmlDocument
errorDesc	tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:PTAMM::TiXmlDocument
errorId	tinyxml.h	/^	int  errorId;$/;"	m	class:PTAMM::TiXmlDocument
errorLocation	tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:PTAMM::TiXmlDocument
errorString	tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:PTAMM::TiXmlBase
errorString	tinyxmlerror.cc	/^const char* TiXmlBase::errorString[ TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:PTAMM::TiXmlBase	file:
fdir	ptam-main.cc	/^std::string fdir = "";$/;"	v
filestr	ptam-main.cc	/^std::ofstream filestr;$/;"	v
finished	System.h	/^    bool finished;$/;"	m	class:PTAMM::System
firstChild	tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:PTAMM::TiXmlNode
foo	KeyFrame.cc	/^static LevelHelpersFiller foo;$/;"	m	namespace:PTAMM	file:
framecount	ptam-main.cc	/^static int framecount = 0;$/;"	v	file:
gavLevelColors	KeyFrame.cc	/^Vector<3> gavLevelColors[LEVELS];$/;"	m	namespace:PTAMM	file:
getFDir	GLWindow2.h	/^    static std::string getFDir(){ return "";}$/;"	f	class:PTAMM::GLWindow2
getFDir	ptam-main.cc	/^std::string PTAMM::GLWindow2::getFDir()$/;"	f	class:PTAMM::GLWindow2
getFrame	ptam-main.cc	/^JNICALL void VideoSource::getFrame(CVD::Image<CVD::byte> * imBW,$/;"	f	class:VideoSource
getHashFromData	MD5Wrapper.cc	/^bool MD5Wrapper::getHashFromData(const unsigned char *byte, unsigned int nBytesToRead, std::string & sMD5Hash)$/;"	f	class:PTAMM::MD5Wrapper
getSize	ptam-main.cc	/^JNICALL void VideoSource::getSize(int * sizeBuffer) {$/;"	f	class:VideoSource
gvnIntValue	GLWindowMenu.h	/^    GVars3::gvar2_int gvnIntValue;  \/\/ Not used by all, but used by some$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
im	KeyFrame.h	/^  CVD::Image<CVD::byte> im;                \/\/ The pyramid level pixels$/;"	m	struct:PTAMM::Level
indent	tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:PTAMM::TiXmlPrinter
init_yuv420p_table	yuv2rgb.c	/^void init_yuv420p_table()$/;"	f
init_yuv422p_table	yuv2rgb.c	/^void init_yuv422p_table(void)$/;"	f
invrtrans	ATANCamera.h	/^  inline double invrtrans(double r)$/;"	f	class:PTAMM::ATANCamera
irCenter	MapPoint.h	/^  CVD::ImageRef irCenter;   \/\/ This is in level-coords in the source pyramid level$/;"	m	struct:PTAMM::MapPoint
irCurrentPos	Tracker.h	/^  CVD::ImageRef irCurrentPos;$/;"	m	struct:PTAMM::Trail
irGridPos	CalibImage.h	/^  CVD::ImageRef irGridPos;$/;"	m	struct:PTAMM::CalibGridCorner
irImageSize	Tracker.cc	/^    ImageRef TrackerData::irImageSize;  \/\/ Static member of TrackerData lives here$/;"	m	class:PTAMM::TrackerData	file:
irImageSize	TrackerData.h	/^  static CVD::ImageRef irImageSize;$/;"	m	struct:PTAMM::TrackerData
irInitialPos	Tracker.h	/^  CVD::ImageRef irInitialPos;$/;"	m	struct:PTAMM::Trail
irLevelPos	KeyFrame.h	/^  CVD::ImageRef irLevelPos;$/;"	m	struct:PTAMM::Candidate
irPosition	ModelBrowser.h	/^    CVD::ImageRef irPosition;                      \/\/ its location$/;"	m	class:PTAMM::BrowserItem
irSize	ModelBrowser.h	/^    CVD::ImageRef irSize;                          \/\/ The size of the item$/;"	m	class:PTAMM::BrowserItem
isnan	Bundle.cc	/^inline bool isnan(double d) {return !(d==d);}$/;"	f	namespace:PTAMM
j	Bundle.h	/^  int j;$/;"	m	struct:PTAMM::OffDiagScriptEntry
jvm	ptam-main.cc	/^JavaVM* jvm=NULL;$/;"	v
k	Bundle.h	/^  int k;$/;"	m	struct:PTAMM::OffDiagScriptEntry
last	ptam-main.cc	/^static double last = now_ms();$/;"	v	file:
lastChild	tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:PTAMM::TiXmlNode
lineBreak	tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:PTAMM::TiXmlPrinter
location	tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:PTAMM::TiXmlBase
m23B	Bundle.h	/^  Matrix<2,3> m23B;$/;"	m	struct:PTAMM::Meas
m26A	Bundle.h	/^  Matrix<2,6> m26A;$/;"	m	struct:PTAMM::Meas
m26Jacobian	TrackerData.h	/^  Matrix<2,6> m26Jacobian;   \/\/ Jacobian wrt camera position$/;"	m	struct:PTAMM::TrackerData
m26PoseJac	CalibImage.h	/^    Matrix<2,6> m26PoseJac;$/;"	m	struct:PTAMM::CalibImage::ErrorAndJacobians
m2CamDerivs	Bundle.h	/^  Matrix<2> m2CamDerivs;$/;"	m	struct:PTAMM::Meas
m2CamDerivs	KeyFrame.h	/^  Matrix<2> m2CamDerivs; \/\/ Cam derivs at found location$/;"	m	struct:PTAMM::Measurement
m2CamDerivs	TrackerData.h	/^  Matrix<2> m2CamDerivs;  \/\/ Camera projection derivs$/;"	m	struct:PTAMM::TrackerData
m2NCameraJac	CalibImage.h	/^    Matrix<2,NUMTRACKERCAMPARAMETERS> m2NCameraJac;$/;"	m	struct:PTAMM::CalibImage::ErrorAndJacobians
m2PixelProjectionJac	HomographyInit.h	/^  Matrix<2> m2PixelProjectionJac;$/;"	m	struct:PTAMM::HomographyMatch
m2Warp	CalibCornerPatch.cc	/^Matrix<2> CalibCornerPatch::Params::m2Warp()$/;"	f	class:PTAMM::CalibCornerPatch::Params
m3Rp	HomographyInit.h	/^  Matrix<3> m3Rp;$/;"	m	struct:PTAMM::HomographyDecomposition
m3V	Bundle.h	/^  Matrix<3> m3V;          \/\/ Accumulator$/;"	m	struct:PTAMM::Point
m3VStarInv	Bundle.h	/^  Matrix<3> m3VStarInv;$/;"	m	struct:PTAMM::Point
m63W	Bundle.h	/^  Matrix<6,3> m63W; $/;"	m	struct:PTAMM::Meas
m63Y	Bundle.h	/^  Matrix<6,3> m63Y;$/;"	m	struct:PTAMM::Meas
m6U	Bundle.h	/^  Matrix<6> m6U;          \/\/ Accumulator$/;"	m	struct:PTAMM::Camera
mBullets	ShooterGame.h	/^    std::list< Bullet > mBullets;                 \/\/ The list of bullets$/;"	m	class:PTAMM::ShooterGame
mCamera	ARDriver.h	/^    ATANCamera mCamera;$/;"	m	class:PTAMM::ARDriver
mCamera	CameraCalibrator.h	/^  ATANCamera mCamera;$/;"	m	class:PTAMM::CameraCalibrator
mCamera	Relocaliser.h	/^  ATANCamera mCamera;$/;"	m	class:PTAMM::Relocaliser
mCamera	Tracker.h	/^  ATANCamera mCamera;             \/\/ Projection model$/;"	m	class:PTAMM::Tracker
mControlsBottomRight	ModelControls.h	/^    CVD::ImageRef mControlsBottomRight;       \/\/ The location of the bottom right of the control panel$/;"	m	class:PTAMM::ModelControls
mControlsTopLeft	ModelControls.h	/^    CVD::ImageRef mControlsTopLeft;           \/\/ The location of the top left of the control panel$/;"	m	class:PTAMM::ModelControls
mCurrentKF	Tracker.h	/^  KeyFrame mCurrentKF;            \/\/ The current working frame as a keyframe struct$/;"	m	class:PTAMM::Tracker
mData	ModelControls.h	/^    ModelsGameData & mData;                   \/\/ Reference to the game data object$/;"	m	class:PTAMM::ModelControls
mData	ModelsGame.h	/^    ModelsGameData mData;           \/\/ The game data$/;"	m	class:PTAMM::ModelsGame
mDisplayState	ModelsGameData.h	/^    DisplayState mDisplayState;                 \/\/ Game display state$/;"	m	class:PTAMM::ModelsGameData
mFirstKF	Tracker.h	/^  KeyFrame mFirstKF;              \/\/ First of the stereo pair$/;"	m	class:PTAMM::Tracker
mGLWindow	ARDriver.h	/^    GLWindow2 &mGLWindow;$/;"	m	class:PTAMM::ARDriver
mGLWindow	CameraCalibrator.h	/^  GLWindow2 mGLWindow;$/;"	m	class:PTAMM::CameraCalibrator
mGLWindow	MapViewer.h	/^    GLWindow2 &mGLWindow;$/;"	m	class:PTAMM::MapViewer
mGLWindow	System.h	/^    GLWindow2 mGLWindow;                            \/\/ The OpenGL window$/;"	m	class:PTAMM::System
mInheritedSteps	CalibImage.h	/^  Matrix<2> mInheritedSteps;$/;"	m	struct:PTAMM::CalibGridCorner
mLockRecords	MapLockManager.h	/^    std::map< void *, bool > mLockRecords;       \/\/ which threads are currently using this map$/;"	m	class:PTAMM::MapLockManager
mLockingThread	MapLockManager.h	/^    void * mLockingThread;                       \/\/ who want to lock \/ has locked the thread$/;"	m	class:PTAMM::MapLockManager
mLostOverlay	ARDriver.h	/^	Image<Rgba<CVD::byte> > mLostOverlay;$/;"	m	class:PTAMM::ARDriver
mMD5	MD5Wrapper.h	/^    MD5 *mMD5;$/;"	m	class:PTAMM::MD5Wrapper
mMapMaker	Tracker.h	/^  MapMaker &mMapMaker;            \/\/ The class which maintains the map$/;"	m	class:PTAMM::Tracker
mMeasList	Bundle.h	/^  std::list<Meas> mMeasList;$/;"	m	class:PTAMM::Bundle
mMeasurements	KeyFrame.h	/^    std::map<MapPoint*, Measurement> mMeasurements;           \/\/ All the measurements associated with the keyframe$/;"	m	class:PTAMM::KeyFrame
mMessageForUser	MapViewer.h	/^    std::ostringstream mMessageForUser;$/;"	m	class:PTAMM::MapViewer
mMessageForUser	Tracker.h	/^  std::ostringstream mMessageForUser;$/;"	m	class:PTAMM::Tracker
mModelBrowser	ModelsGame.h	/^    ModelBrowser mModelBrowser;     \/\/ The model browser$/;"	m	class:PTAMM::ModelsGame
mModelControls	ModelsGame.h	/^    ModelControls mModelControls;   \/\/ The model controls$/;"	m	class:PTAMM::ModelsGame
mPages	ModelBrowser.h	/^    Pages mPages;                                  \/\/ the top level of pages$/;"	m	class:PTAMM::ModelBrowser
mParams	CalibCornerPatch.h	/^  Params mParams;$/;"	m	class:PTAMM::CalibCornerPatch
mPatch	Tracker.h	/^  MiniPatch mPatch;$/;"	m	struct:PTAMM::Trail
mPreviousFrameKF	Tracker.h	/^  KeyFrame mPreviousFrameKF;      \/\/ Used by trail tracking to check married matches$/;"	m	class:PTAMM::Tracker
mRelocaliser	Tracker.h	/^  Relocaliser mRelocaliser;       \/\/ Relocalisation module$/;"	m	class:PTAMM::Tracker
mTargets	ShooterGame.h	/^    std::list< ShooterGameTarget * > mTargets;    \/\/ The list of targets$/;"	m	class:PTAMM::ShooterGame
mTrackingQuality	Tracker.h	/^  enum {BAD, DODGY, GOOD} mTrackingQuality;$/;"	m	class:PTAMM::Tracker	typeref:enum:PTAMM::Tracker::__anon7
mVideoSource	CameraCalibrator.h	/^  VideoSource mVideoSource;$/;"	m	class:PTAMM::CameraCalibrator
mVideoSource	System.h	/^    VideoSource mVideoSource;                       \/\/ The video image source$/;"	m	class:PTAMM::System
mafColor	ShooterGameTarget.h	/^    float mafColor[3];                        \/\/ Its colour$/;"	m	class:PTAMM::ShooterGameTarget
main	main.cpp	/^int main()$/;"	f
manMeasAttempted	Tracker.h	/^  int manMeasAttempted[LEVELS];$/;"	m	class:PTAMM::Tracker
manMeasFound	Tracker.h	/^  int manMeasFound[LEVELS];$/;"	m	class:PTAMM::Tracker
mapLockManager	Map.h	/^    MapLockManager mapLockManager;                   \/\/ All threads must register to this and$/;"	m	class:PTAMM::Map
max	GLWindowMenu.h	/^    int max;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
mbActive	MGButton.h	/^    bool mbActive;                                        \/\/ Is the button activated$/;"	m	class:PTAMM::MGButton
mbAlive	ShooterGame.h	/^    bool mbAlive;                                 \/\/ Is the player alive$/;"	m	class:PTAMM::ShooterGame
mbBrowseMode	MapViewer.h	/^    bool mbBrowseMode;                            \/\/ Map browsing mode enabled?$/;"	m	class:PTAMM::MapViewer
mbBundleAbortRequested	MapMaker.h	/^    bool mbBundleAbortRequested;      \/\/ We should stop bundle adjustment$/;"	m	class:PTAMM::MapMaker
mbBundleRunning	MapMaker.h	/^    bool mbBundleRunning;             \/\/ Bundle adjustment is running$/;"	m	class:PTAMM::MapMaker
mbBundleRunningIsRecent	MapMaker.h	/^    bool mbBundleRunningIsRecent;     \/\/    ... and it's a local bundle adjustment.$/;"	m	class:PTAMM::MapMaker
mbConverged	Bundle.h	/^  bool mbConverged;$/;"	m	class:PTAMM::Bundle
mbDelayedLoad	Model3ds.h	/^    bool mbDelayedLoad;             \/\/ Is a delayed load pending?$/;"	m	class:PTAMM::Model3DS
mbDidCoarse	Tracker.h	/^  bool mbDidCoarse;               \/\/ Did tracking use the coarse tracking stage?$/;"	m	class:PTAMM::Tracker
mbDone	CameraCalibrator.h	/^  bool mbDone;$/;"	m	class:PTAMM::CameraCalibrator
mbDone	System.h	/^    bool mbDone;                                    \/\/ Kill?$/;"	m	class:PTAMM::System
mbDraw	Tracker.h	/^  bool mbDraw;                    \/\/ Should the tracker draw anything to OpenGL?$/;"	m	class:PTAMM::Tracker
mbEnableRepeat	MGButton.h	/^    const bool mbEnableRepeat;                            \/\/ enable repeat actions for press and hold$/;"	m	class:PTAMM::MGButton
mbFound	PatchFinder.h	/^  bool mbFound;               \/\/ Was the patch found?$/;"	m	class:PTAMM::PatchFinder
mbGrabNextFrame	CameraCalibrator.h	/^  bool mbGrabNextFrame;$/;"	m	class:PTAMM::CameraCalibrator
mbHideAR	ModelsGameData.h	/^    bool mbHideAR;                              \/\/ Hide the AR$/;"	m	class:PTAMM::ModelsGameData
mbHideControls	ModelsGameData.h	/^    bool mbHideControls;                        \/\/ Hide the controls$/;"	m	class:PTAMM::ModelsGameData
mbHidePoints	ModelsGameData.h	/^    bool mbHidePoints;                          \/\/ Hide the map points$/;"	m	class:PTAMM::ModelsGameData
mbHitMaxIterations	Bundle.h	/^  bool mbHitMaxIterations;$/;"	m	class:PTAMM::Bundle
mbIcon	ModelBrowser.h	/^    bool mbIcon;                                   \/\/ Icon enabled$/;"	m	class:PTAMM::BrowserItem
mbIcons	MGButton.h	/^    bool mbIcons;                                         \/\/ Use icons?$/;"	m	class:PTAMM::MGButton
mbInitialised	ARDriver.h	/^    bool mbInitialised;$/;"	m	class:PTAMM::ARDriver
mbInitialised	Game.h	/^    bool mbInitialised;                                                             \/\/ Has the game been initialized$/;"	m	class:PTAMM::Game
mbInitialized	ModelBrowser.h	/^    bool mbInitialized;                            \/\/ has the browser been initialised$/;"	m	class:PTAMM::ModelBrowser
mbInitialized	ModelControls.h	/^    bool mbInitialized;                       \/\/ Has the panel been initialized$/;"	m	class:PTAMM::ModelControls
mbInvalid	ATANCamera.h	/^    bool mbInvalid;           \/\/ Was the last projection invalid?$/;"	m	class:PTAMM::ATANCamera
mbJustRecoveredSoUseCoarse	Tracker.h	/^  bool mbJustRecoveredSoUseCoarse;\/\/ Always use coarse tracking after recovery!$/;"	m	class:PTAMM::Tracker
mbLoaded	Model3ds.h	/^    bool mbLoaded;                  \/\/ Has the model been loaded$/;"	m	class:PTAMM::Model3DS
mbLocked	MapLockManager.h	/^    bool mbLocked;                               \/\/ is the map locked$/;"	m	class:PTAMM::MapLockManager
mbMadeJacs	SmallBlurryImage.h	/^  bool mbMadeJacs;$/;"	m	class:PTAMM::SmallBlurryImage
mbNewRun	Relocaliser.h	/^  bool mbNewRun;                                 \/\/ Is this a new search of all maps?$/;"	m	class:PTAMM::Relocaliser
mbOK	MapSerializer.h	/^    bool mbOK;                                              \/\/ Init() has been run.$/;"	m	class:PTAMM::MapSerializer
mbReInitDone	MapMaker.h	/^    bool mbReInitDone;                \/\/ map reinitialization done$/;"	m	class:PTAMM::MapMaker
mbReInitRequested	MapMaker.h	/^    bool mbReInitRequested;           \/\/ map reinitialization requested$/;"	m	class:PTAMM::MapMaker
mbResetDone	MapMaker.h	/^    bool mbResetDone;                 \/\/ The reset was done.$/;"	m	class:PTAMM::MapMaker
mbResetRequested	MapMaker.h	/^    bool mbResetRequested;            \/\/ A reset has been requested$/;"	m	class:PTAMM::MapMaker
mbSnapTo	ModelsGameData.h	/^    bool mbSnapTo;                              \/\/ Snap to the map points$/;"	m	class:PTAMM::ModelsGameData
mbSwitchDone	MapMaker.h	/^    bool mbSwitchDone;                \/\/ switch to another map done$/;"	m	class:PTAMM::MapMaker
mbSwitchRequested	MapMaker.h	/^    bool mbSwitchRequested;           \/\/ switch to another map requested$/;"	m	class:PTAMM::MapMaker
mbTemplateBad	PatchFinder.h	/^  bool mbTemplateBad;         \/\/ Error during template generation?$/;"	m	class:PTAMM::PatchFinder
mbToggle	MGButton.h	/^    const bool mbToggle;                                  \/\/ Is it a toggle button?$/;"	m	class:PTAMM::MGButton
mbUseSBIInit	Tracker.h	/^  bool mbUseSBIInit;$/;"	m	class:PTAMM::Tracker
mbUserPressedSpacebar	Tracker.h	/^  bool mbUserPressedSpacebar;$/;"	m	class:PTAMM::Tracker
mcal	ptam-main.cc	/^CameraCalibrator* mcal;$/;"	v
md2Tan	ATANCamera.h	/^    double md2Tan;          \/\/ distortion model coeff$/;"	m	class:PTAMM::ATANCamera
mdBestScore	Relocaliser.h	/^  double mdBestScore;$/;"	m	class:PTAMM::Relocaliser
mdDiameter	Model3ds.h	/^    double mdDiameter;                \/\/ This is used to set the radius of the selected target$/;"	m	class:PTAMM::Model3DS
mdDistortionEnabled	ATANCamera.h	/^  double mdDistortionEnabled; \/\/ One or zero depending on if distortion is on or off.$/;"	m	class:PTAMM::ATANCamera
mdEyeRadius	EyeGame.h	/^    double mdEyeRadius;                       \/\/ The size of the eye$/;"	m	class:PTAMM::EyeGame
mdGrowthRate	ShooterGameTarget.h	/^    double mdGrowthRate;                      \/\/ Its growth rate$/;"	m	class:PTAMM::ShooterGameTarget
mdLambda	Bundle.h	/^  double mdLambda;$/;"	m	class:PTAMM::Bundle
mdLambdaFactor	Bundle.h	/^  double mdLambdaFactor;$/;"	m	class:PTAMM::Bundle
mdLargestRadius	ATANCamera.h	/^    double mdLargestRadius; \/\/ Largest R in the image$/;"	m	class:PTAMM::ATANCamera
mdLastDistR	ATANCamera.h	/^    double mdLastDistR;       \/\/ Last z=1 distorted radius$/;"	m	class:PTAMM::ATANCamera
mdLastError	CalibCornerPatch.h	/^  double mdLastError;$/;"	m	class:PTAMM::CalibCornerPatch
mdLastFactor	ATANCamera.h	/^    double mdLastFactor;      \/\/ Last ratio of z=1 radii$/;"	m	class:PTAMM::ATANCamera
mdLastR	ATANCamera.h	/^    double mdLastR;           \/\/ Last z=1 radius$/;"	m	class:PTAMM::ATANCamera
mdMSDScaledVelocityMagnitude	Tracker.h	/^  double mdMSDScaledVelocityMagnitude; \/\/ Velocity magnitude scaled by relative scene depth.$/;"	m	class:PTAMM::Tracker
mdMaxPixelErrorSquared	HomographyInit.h	/^  double mdMaxPixelErrorSquared;$/;"	m	class:PTAMM::HomographyInit
mdMaxR	ATANCamera.h	/^    double mdMaxR;          \/\/ Largest R for which we consider projection valid$/;"	m	class:PTAMM::ATANCamera
mdMeanDiff	PatchFinder.h	/^  double mdMeanDiff;          \/\/ Updated during inverse composition$/;"	m	class:PTAMM::PatchFinder
mdMeanPixelError	CameraCalibrator.h	/^  double mdMeanPixelError;$/;"	m	class:PTAMM::CameraCalibrator
mdOneOver2Tan	ATANCamera.h	/^    double mdOneOver2Tan;   \/\/ distortion model coeff$/;"	m	class:PTAMM::ATANCamera
mdOnePixelDist	ATANCamera.h	/^    double mdOnePixelDist;  \/\/ z=1 distance covered by a single pixel offset (a rough estimate!)$/;"	m	class:PTAMM::ATANCamera
mdScale	Model3ds.h	/^    double mdScale;                 \/\/ the model's scale;$/;"	m	class:PTAMM::Model3DS
mdScale	ShooterGameTarget.h	/^    double mdScale;                           \/\/ Its scale$/;"	m	class:PTAMM::ShooterGameTarget
mdScaleMult	Model3ds.h	/^    double mdScaleMult;             \/\/ the scale multiplier for the model$/;"	m	class:PTAMM::Model3DS
mdShadowHalfSize	EyeGame.h	/^    double mdShadowHalfSize;                  \/\/ The size of the shadow$/;"	m	class:PTAMM::EyeGame
mdSigmaSquared	Bundle.h	/^  double mdSigmaSquared;$/;"	m	class:PTAMM::Bundle
mdVelocityMagnitude	Tracker.h	/^  double mdVelocityMagnitude;     \/\/ Used to decide on coarse tracking $/;"	m	class:PTAMM::Tracker
mdVersion	ModelsGameData.h	/^    const double mdVersion;                     \/\/ Current game version$/;"	m	class:PTAMM::ModelsGameData
mdVersion	ShooterGame.h	/^    const double mdVersion;                       \/\/ Current game version$/;"	m	class:PTAMM::ShooterGame
mdW	ATANCamera.h	/^    double mdW;             \/\/ distortion model coeff$/;"	m	class:PTAMM::ATANCamera
mdWiggleScale	MapMaker.h	/^    double mdWiggleScale;  \/\/ Metric distance between the first two KeyFrames (copied from GVar)$/;"	m	class:PTAMM::MapMaker
mdWiggleScaleDepthNormalized	MapMaker.h	/^    double mdWiggleScaleDepthNormalized;  \/\/ The above normalized against scene depth, $/;"	m	class:PTAMM::MapMaker
mdWinv	ATANCamera.h	/^    double mdWinv;          \/\/ distortion model coeff$/;"	m	class:PTAMM::ATANCamera
meas_it	KeyFrame.h	/^typedef std::map<MapPoint*, Measurement>::iterator meas_it;  \/\/ For convenience, and to work around an emacs paren-matching bug$/;"	t	namespace:PTAMM
mgvdUpdateConvergenceLimit	Bundle.h	/^  GVars3::gvar3<double> mgvdUpdateConvergenceLimit;$/;"	m	class:PTAMM::Bundle
mgvdWiggleScale	MapMaker.h	/^    GVars3::gvar3<double> mgvdWiggleScale;   \/\/ GVar for above$/;"	m	class:PTAMM::MapMaker
mgvnBitrate	System.h	/^    GVars3::gvar3<int> mgvnBitrate;                 \/\/ Bitrate to encode at$/;"	m	class:PTAMM::System
mgvnBundleCout	Bundle.h	/^  GVars3::gvar3<int> mgvnBundleCout;$/;"	m	class:PTAMM::Bundle
mgvnDisableDistortion	CameraCalibrator.h	/^  GVars3::gvar3<int> mgvnDisableDistortion;$/;"	m	class:PTAMM::CameraCalibrator
mgvnDrawMapInfo	System.h	/^    GVars3::gvar3<int> mgvnDrawMapInfo;             \/\/ Draw map info on the screen$/;"	m	class:PTAMM::System
mgvnEnabled	GLWindowMenu.h	/^  GVars3::gvar2_int mgvnEnabled;$/;"	m	class:PTAMM::GLWindowMenu
mgvnLockMap	System.h	/^    GVars3::gvar3<int> mgvnLockMap;                 \/\/ Stop a map being edited - i.e. keyframes added, points updated$/;"	m	class:PTAMM::System
mgvnMaxIterations	Bundle.h	/^  GVars3::gvar3<int> mgvnMaxIterations;$/;"	m	class:PTAMM::Bundle
mgvnMenuItemWidth	GLWindowMenu.h	/^  GVars3::gvar2_int mgvnMenuItemWidth;$/;"	m	class:PTAMM::GLWindowMenu
mgvnMenuTextOffset	GLWindowMenu.h	/^  GVars3::gvar2_int mgvnMenuTextOffset;$/;"	m	class:PTAMM::GLWindowMenu
mgvnOptimizing	CameraCalibrator.h	/^  GVars3::gvar3<int> mgvnOptimizing;$/;"	m	class:PTAMM::CameraCalibrator
mgvnSaveFIFO	System.h	/^    GVars3::gvar3<int> mgvnSaveFIFO;                \/\/ Output to a FIFO (make a video)$/;"	m	class:PTAMM::System
mgvnShowImage	CameraCalibrator.h	/^  GVars3::gvar3<int> mgvnShowImage;$/;"	m	class:PTAMM::CameraCalibrator
mgvvCameraParams	ATANCamera.h	/^  GVars3::gvar3<Vector<NUMTRACKERCAMPARAMETERS> > mgvvCameraParams; \/\/ The actual camera parameters$/;"	m	class:PTAMM::ATANCamera
mim	CalibImage.h	/^  CVD::Image<CVD::byte> mim;$/;"	m	class:PTAMM::CalibImage
mimAngleJacs	CalibCornerPatch.h	/^  CVD::Image<Vector<2> > mimAngleJacs;$/;"	m	class:PTAMM::CalibCornerPatch
mimBrowser	ModelBrowser.h	/^    CVD::Image< CVD::Rgba<CVD::byte> > mimBrowser; \/\/ image for the browser$/;"	m	class:PTAMM::ModelBrowser
mimFrameBW	System.h	/^    CVD::Image<CVD::byte> mimFrameBW;               \/\/ The Black and white image for tracking\/mapping$/;"	m	class:PTAMM::System
mimFrameRGB	System.h	/^    CVD::Image<CVD::Rgb<CVD::byte> > mimFrameRGB;   \/\/ The RGB image used for AR$/;"	m	class:PTAMM::System
mimGradients	CalibCornerPatch.h	/^  CVD::Image<Vector<2> > mimGradients;$/;"	m	class:PTAMM::CalibCornerPatch
mimIcon	MGButton.h	/^    CVD::Image< CVD::Rgba<CVD::byte> > mimIcon;           \/\/ The button's icon$/;"	m	class:PTAMM::MGButton
mimIcon	ModelBrowser.h	/^    CVD::Image< CVD::Rgba<CVD::byte> > mimIcon;    \/\/ icon for the model (optional)$/;"	m	class:PTAMM::BrowserItem
mimIconActive	MGButton.h	/^    CVD::Image< CVD::Rgba<CVD::byte> > mimIconActive;     \/\/ Its active icon$/;"	m	class:PTAMM::MGButton
mimImageJacs	SmallBlurryImage.h	/^  CVD::Image<Vector<2> > mimImageJacs;$/;"	m	class:PTAMM::SmallBlurryImage
mimJacs	PatchFinder.h	/^  CVD::Image<std::pair<float,float> > mimJacs;  \/\/ Inverse composition jacobians; stored as floats to save a bit of space.$/;"	m	class:PTAMM::PatchFinder
mimOrigPatch	MiniPatch.h	/^  CVD::Image<CVD::byte> mimOrigPatch;  \/\/ Original pixels$/;"	m	struct:PTAMM::MiniPatch
mimSharedSourceTemplate	CalibCornerPatch.h	/^  static CVD::Image<float> mimSharedSourceTemplate;$/;"	m	class:PTAMM::CalibCornerPatch
mimSmall	SmallBlurryImage.h	/^  CVD::Image<CVD::byte> mimSmall;$/;"	m	class:PTAMM::SmallBlurryImage
mimTemplate	CalibCornerPatch.h	/^  CVD::Image<float> mimTemplate;$/;"	m	class:PTAMM::CalibCornerPatch
mimTemplate	PatchFinder.h	/^  CVD::Image<CVD::byte> mimTemplate;   \/\/ The matching template$/;"	m	class:PTAMM::PatchFinder
mimTemplate	SmallBlurryImage.h	/^  CVD::Image<float> mimTemplate;$/;"	m	class:PTAMM::SmallBlurryImage
min	GLWindowMenu.h	/^    int min;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
mirCenter	PatchFinder.h	/^  CVD::ImageRef mirCenter;    \/\/ Quantized location of the center pixel of the NxN pixel template$/;"	m	class:PTAMM::PatchFinder
mirFBSize	ARDriver.h	/^    ImageRef mirFBSize;$/;"	m	class:PTAMM::ARDriver
mirFrameSize	ARDriver.h	/^    ImageRef mirFrameSize;$/;"	m	class:PTAMM::ARDriver
mirHelpLocation	ModelControls.h	/^    CVD::ImageRef mirHelpLocation;            \/\/ Location of the help tip$/;"	m	class:PTAMM::ModelControls
mirLastMousePos	GLWindow2.h	/^  CVD::ImageRef mirLastMousePos;$/;"	m	class:PTAMM::GLWindow2
mirPosition	MGButton.h	/^    CVD::ImageRef mirPosition;                            \/\/ The top left corner of the button$/;"	m	class:PTAMM::MGButton
mirPosition	ModelBrowser.h	/^    CVD::ImageRef mirPosition;                     \/\/ The top left corner of the button set$/;"	m	class:PTAMM::ModelBrowser
mirPredictedPos	PatchFinder.h	/^  CVD::ImageRef mirPredictedPos;  \/\/ Search center location of FindPatchCoarse in L0$/;"	m	class:PTAMM::PatchFinder
mirSize	MGButton.h	/^    CVD::ImageRef mirSize;                                \/\/ The size of the button$/;"	m	class:PTAMM::MGButton
mirSize	SmallBlurryImage.h	/^  static CVD::ImageRef mirSize;$/;"	m	class:PTAMM::SmallBlurryImage
mirSize	Tracker.h	/^  CVD::ImageRef mirSize;          \/\/ Image size of whole image$/;"	m	class:PTAMM::Tracker
mirSize	VideoSource.h	/^  CVD::ImageRef mirSize;$/;"	m	class:PTAMM::VideoSource
mirVideoSize	GLWindow2.h	/^  CVD::ImageRef mirVideoSize;   \/\/ The size of the source video material.$/;"	m	class:PTAMM::GLWindow2
mirWindowSize	GLWindow2.h	/^  CVD::ImageRef mirWindowSize; \/\/TODO$/;"	m	class:PTAMM::GLWindow2
mlTrails	Tracker.h	/^  std::list<Trail> mlTrails;      \/\/ Used by trail tracking$/;"	m	class:PTAMM::Tracker
mm2LastWarpMatrix	PatchFinder.h	/^  Matrix<2> mm2LastWarpMatrix;       \/\/ What was the last warp matrix this PatchFinder used?$/;"	m	class:PTAMM::PatchFinder
mm2WarpInverse	PatchFinder.h	/^  Matrix<2> mm2WarpInverse;   \/\/ Warping matrix$/;"	m	class:PTAMM::PatchFinder
mm3BestHomography	HomographyInit.h	/^  Matrix<3> mm3BestHomography;$/;"	m	class:PTAMM::HomographyInit
mm3HInv	PatchFinder.h	/^  Matrix<3> mm3HInv;          \/\/ Inverse composition JtJ^-1$/;"	m	class:PTAMM::PatchFinder
mmKeyFrameLoadLUT	MapSerializer.h	/^    std::map< int, KeyFrame * >       mmKeyFrameLoadLUT;    \/\/ lookup table for assigning uid to keyframes$/;"	m	class:PTAMM::MapSerializer
mmKeyFrameSaveLUT	MapSerializer.h	/^    std::map< const KeyFrame *, int > mmKeyFrameSaveLUT;    \/\/ lookup table for assigning uid to keyframes$/;"	m	class:PTAMM::MapSerializer
mmMapPointLoadLUT	MapSerializer.h	/^    std::map< int, MapPoint * >       mmMapPointLoadLUT;    \/\/ lookup table for assigning uid to mappoints$/;"	m	class:PTAMM::MapSerializer
mmMapPointSaveLUT	MapSerializer.h	/^    std::map< const MapPoint *, int > mmMapPointSaveLUT;    \/\/ lookup table for assigning uid to mappoints$/;"	m	class:PTAMM::MapSerializer
mmMeasCrossRef	MapSerializer.h	/^    std::map< KeyFrame*, std::vector< std::pair< int, Measurement > > > mmMeasCrossRef;$/;"	m	class:PTAMM::MapSerializer
mmMouseButtonPressed	GLWindow2.h	/^  std::map< int, bool > mmMouseButtonPressed;   \/\/ record of which mouse button is currently pressed$/;"	m	class:PTAMM::GLWindow2
mmSubMenus	GLWindowMenu.h	/^  std::map<std::string, SubMenu> mmSubMenus;$/;"	m	class:PTAMM::GLWindowMenu
mnAccepted	Bundle.h	/^  int mnAccepted;$/;"	m	class:PTAMM::Bundle
mnActiveCounter	MGButton.h	/^    int mnActiveCounter;                                  \/\/ Number of frames left to derw as active$/;"	m	class:PTAMM::MGButton
mnBest	Relocaliser.h	/^  int mnBest;$/;"	m	class:PTAMM::Relocaliser
mnCamsToUpdate	Bundle.h	/^  int mnCamsToUpdate;$/;"	m	class:PTAMM::Bundle
mnCounter	ARDriver.h	/^    int mnCounter;$/;"	m	class:PTAMM::ARDriver
mnCounter	Bundle.h	/^  int mnCounter;$/;"	m	class:PTAMM::Bundle
mnDisplayList	Model3ds.h	/^    GLuint mnDisplayList[2];        \/\/ The OpenGL display lists for the model$/;"	m	class:PTAMM::Model3DS
mnEyeDisplayList	EyeGame.h	/^    GLuint mnEyeDisplayList;                  \/\/ Display list for an eye$/;"	m	class:PTAMM::EyeGame
mnFrame	Tracker.h	/^  int mnFrame;                    \/\/ Frames processed since last reset$/;"	m	class:PTAMM::Tracker
mnFrameBuffer	ARDriver.h	/^    GLuint mnFrameBuffer;$/;"	m	class:PTAMM::ARDriver
mnFrameBufferTex	ARDriver.h	/^    GLuint mnFrameBufferTex;$/;"	m	class:PTAMM::ARDriver
mnFrameCounter	EyeGame.h	/^    int mnFrameCounter;                       \/\/ A frame counter$/;"	m	class:PTAMM::EyeGame
mnFrameTex	ARDriver.h	/^    GLuint mnFrameTex;$/;"	m	class:PTAMM::ARDriver
mnFrameTexUV	ARDriver.h	/^    GLuint mnFrameTexUV;$/;"	m	class:PTAMM::ARDriver
mnHalfPatchSize	MiniPatch.cc	/^int MiniPatch::mnHalfPatchSize = 4;$/;"	m	class:PTAMM::MiniPatch	file:
mnHalfPatchSize	MiniPatch.h	/^  static int mnHalfPatchSize;     \/\/ How big is the patch?$/;"	m	struct:PTAMM::MiniPatch
mnHealth	ShooterGame.h	/^    int mnHealth;                                 \/\/ The player's health$/;"	m	class:PTAMM::ShooterGame
mnHelpCounter	ModelControls.h	/^    int mnHelpCounter;                        \/\/ How many frames has the tip been displayed for$/;"	m	class:PTAMM::ModelControls
mnInitialStage	Tracker.h	/^	TRAIL_TRACKING_COMPLETE} mnInitialStage;  \/\/ How far are we towards making the initial map?$/;"	m	class:PTAMM::Tracker	typeref:enum:PTAMM::Tracker::__anon6
mnLastKeyFrameDropped	Tracker.h	/^  int mnLastKeyFrameDropped;      \/\/ Counter of last keyframe inserted.$/;"	m	class:PTAMM::Tracker
mnLeftMostCoord	GLWindowMenu.h	/^  int mnLeftMostCoord;$/;"	m	class:PTAMM::GLWindowMenu
mnLostFrames	Tracker.h	/^  int mnLostFrames;$/;"	m	class:PTAMM::Tracker
mnMapNum	Map.h	/^    int mnMapNum;                                    \/\/ The map number$/;"	m	class:PTAMM::Map
mnMaxSSD	MiniPatch.cc	/^int MiniPatch::mnMaxSSD = 9999;$/;"	m	class:PTAMM::MiniPatch	file:
mnMaxSSD	MiniPatch.h	/^  static int mnMaxSSD;            \/\/ Max SSD for matches?$/;"	m	struct:PTAMM::MiniPatch
mnMaxSSD	PatchFinder.h	/^  int mnMaxSSD; \/\/ This is the max ZMSSD for a valid match. It's set in the constructor.$/;"	m	class:PTAMM::PatchFinder
mnMenuHeight	GLWindowMenu.h	/^  int mnMenuHeight;$/;"	m	class:PTAMM::GLWindowMenu
mnMenuTop	GLWindowMenu.h	/^  int mnMenuTop;$/;"	m	class:PTAMM::GLWindowMenu
mnModelIdx	ModelsGameData.h	/^    int mnModelIdx;                             \/\/ The current model index$/;"	m	class:PTAMM::ModelsGameData
mnPatchSize	PatchFinder.h	/^  int mnPatchSize; \/\/ Size of one side of the matching template.$/;"	m	class:PTAMM::PatchFinder
mnRange	MiniPatch.cc	/^int MiniPatch::mnRange = 10;$/;"	m	class:PTAMM::MiniPatch	file:
mnRange	MiniPatch.h	/^  static int mnRange;             \/\/ How far to search? $/;"	m	struct:PTAMM::MiniPatch
mnScore	ShooterGame.h	/^    int mnScore;                                  \/\/ The player's score$/;"	m	class:PTAMM::ShooterGame
mnSearchLevel	PatchFinder.h	/^  int mnSearchLevel;          \/\/ Search level in input pyramid$/;"	m	class:PTAMM::PatchFinder
mnShadowTex	EyeGame.h	/^    GLuint mnShadowTex;                       \/\/ Texture for the shadow$/;"	m	class:PTAMM::EyeGame
mnSphereDisplayList	ShooterGame.h	/^    GLuint mnSphereDisplayList;                   \/\/ The sphere display list$/;"	m	class:PTAMM::ShooterGame
mnSphereDisplayList	ShooterGameTarget.h	/^    const GLuint & mnSphereDisplayList;       \/\/ The sphere display list$/;"	m	class:PTAMM::ShooterGameTarget
mnStartRow	Bundle.h	/^  int mnStartRow;$/;"	m	class:PTAMM::Bundle
mnStrength	ShooterGameTarget.h	/^    int mnStrength;                           \/\/ Its health$/;"	m	class:PTAMM::ShooterGameTarget
mnTargetTex	ModelsGame.h	/^    GLuint mnTargetTex;             \/\/ The current model target texture$/;"	m	class:PTAMM::ModelsGame
mnTemplateSum	PatchFinder.h	/^  int mnTemplateSum;    \/\/ Cached pixel-sum of the coarse template$/;"	m	class:PTAMM::PatchFinder
mnTemplateSumSq	PatchFinder.h	/^  int mnTemplateSumSq;  \/\/ Cached pixel-squared sum of the coarse template$/;"	m	class:PTAMM::PatchFinder
mnTextOffset	GLWindowMenu.h	/^  int mnTextOffset;$/;"	m	class:PTAMM::GLWindowMenu
mnWidth	GLWindowMenu.h	/^  int mnWidth;$/;"	m	class:PTAMM::GLWindowMenu
mpARDriver	System.h	/^    ARDriver *mpARDriver;                           \/\/ The AR Driver$/;"	m	class:PTAMM::System
mpActionCallback	MGButton.h	/^    ActionCallback mpActionCallback;                      \/\/ The callback function$/;"	m	class:PTAMM::MGButton
mpBestMap	Relocaliser.h	/^  Map * mpBestMap;                                \/\/ The map where the camera has been found$/;"	m	class:PTAMM::Relocaliser
mpButton	ModelControls.h	/^    MGButton * mpButton;                      \/\/ The button that is currently being pressed$/;"	m	class:PTAMM::ModelControls
mpCamera	System.h	/^    ATANCamera *mpCamera;                           \/\/ The camera model$/;"	m	class:PTAMM::System
mpCurrentPageSet	ModelBrowser.h	/^    Pages * mpCurrentPageSet;                      \/\/ for displaying the current page and associated info$/;"	m	class:PTAMM::ModelBrowser
mpInitMap	MapSerializer.h	/^    Map * mpInitMap;                                        \/\/ The map passed to Init(). The current map.$/;"	m	class:PTAMM::MapSerializer
mpLastTemplateMapPoint	PatchFinder.h	/^  MapPoint *mpLastTemplateMapPoint;  \/\/ Which was the last map point this PatchFinder used?$/;"	m	class:PTAMM::PatchFinder
mpMap	ARDriver.h	/^    Map *mpMap;$/;"	m	class:PTAMM::ARDriver
mpMap	MapMaker.h	/^    Map *mpMap;                       \/\/ The current map$/;"	m	class:PTAMM::MapMaker
mpMap	MapSerializer.h	/^    Map * mpMap;                                            \/\/ the map currently be (de)serialized$/;"	m	class:PTAMM::MapSerializer
mpMap	MapViewer.h	/^    Map * mpMap, *mpViewingMap;      \/\/ the active tracking map, and the map being viewed$/;"	m	class:PTAMM::MapViewer
mpMap	ModelsGame.h	/^    Map * mpMap;                    \/\/ The associated map$/;"	m	class:PTAMM::ModelsGame
mpMap	ShooterGame.h	/^    Map * mpMap;                                  \/\/ The associated map$/;"	m	class:PTAMM::ShooterGame
mpMap	System.h	/^    Map *mpMap;                                     \/\/ The current map$/;"	m	class:PTAMM::System
mpMap	Tracker.h	/^  Map *mpMap;                     \/\/ The map, consisting of points and keyframes$/;"	m	class:PTAMM::Tracker
mpMapMaker	System.h	/^    MapMaker *mpMapMaker;                           \/\/ The map maker$/;"	m	class:PTAMM::System
mpMapSerializer	System.h	/^    MapSerializer *mpMapSerializer;                 \/\/ The map serializer for saving and loading maps$/;"	m	class:PTAMM::System
mpMapViewer	System.h	/^    MapViewer *mpMapViewer;                         \/\/ The Map Viewer$/;"	m	class:PTAMM::System
mpNewMap	MapMaker.h	/^    Map *mpNewMap;                     \/\/ The new map, used as a temp placeholder$/;"	m	class:PTAMM::MapMaker
mpParent	ModelBrowser.h	/^    Pages * mpParent;                         \/\/ The parent pages object$/;"	m	class:PTAMM::Pages
mpSBILastFrame	Tracker.h	/^  SmallBlurryImage *mpSBILastFrame;$/;"	m	class:PTAMM::Tracker
mpSBIThisFrame	Tracker.h	/^  SmallBlurryImage *mpSBIThisFrame;$/;"	m	class:PTAMM::Tracker
mpSelectedModelData	ModelBrowser.h	/^    const ModelData * mpSelectedModelData;         \/\/ The selected model's data$/;"	m	class:PTAMM::ModelBrowser
mpSwitchMap	MapMaker.h	/^    Map *mpSwitchMap;                  \/\/ The switch map, used as a temp placeholder$/;"	m	class:PTAMM::MapMaker
mpTracker	System.h	/^    Tracker *mpTracker;                             \/\/ The tracker$/;"	m	class:PTAMM::System
mpViewingMap	MapViewer.h	/^    Map * mpMap, *mpViewingMap;      \/\/ the active tracking map, and the map being viewed$/;"	m	class:PTAMM::MapViewer
mpbAbortSignal	Bundle.h	/^  bool *mpbAbortSignal;$/;"	m	class:PTAMM::Bundle
mptr	VideoSource.h	/^  void *mptr;$/;"	m	class:PTAMM::VideoSource
msCommand	MapSerializer.h	/^    std::string msCommand;                                  \/\/ The command passed to Init()$/;"	m	class:PTAMM::MapSerializer
msCurrentSubMenu	GLWindowMenu.h	/^  std::string msCurrentSubMenu;$/;"	m	class:PTAMM::GLWindowMenu
msDirName	MapSerializer.h	/^    std::string msDirName;                                  \/\/ The directory to save the map(s) to$/;"	m	class:PTAMM::MapSerializer
msHelpTip	ModelControls.h	/^    std::string msHelpTip;                    \/\/ The help tip$/;"	m	class:PTAMM::ModelControls
msModelDir	Model3ds.h	/^    std::string msModelDir;         \/\/ The directory containing the model file and its textures$/;"	m	class:PTAMM::Model3DS
msModelFile	Model3ds.h	/^    std::string msModelFile;        \/\/ The model file name$/;"	m	class:PTAMM::Model3DS
msName	ATANCamera.h	/^    std::string msName;$/;"	m	class:PTAMM::ATANCamera
msName	GLWindowMenu.h	/^  std::string msName;$/;"	m	class:PTAMM::GLWindowMenu
msName	Game.h	/^    const std::string msName;                                                       \/\/ Name of the game$/;"	m	class:PTAMM::Game
msName	MGButton.h	/^    std::string msName;                                   \/\/ Name of the button$/;"	m	class:PTAMM::MGButton
msName	Model3ds.h	/^    std::string msName;             \/\/ Name of the model$/;"	m	class:PTAMM::Model3DS
msName	ModelsGameData.h	/^    const std::string msName;                   \/\/ Name of the game$/;"	m	class:PTAMM::ModelsGameData
msParams	MapSerializer.h	/^    std::string msParams;                                   \/\/ The params passed to Init()$/;"	m	class:PTAMM::MapSerializer
msTitle	GLWindowMenu.h	/^  std::string msTitle;$/;"	m	class:PTAMM::GLWindowMenu
mse2	Relocaliser.h	/^  SE2<> mse2;$/;"	m	class:PTAMM::Relocaliser
mse3Best	Relocaliser.h	/^  SE3<> mse3Best;$/;"	m	class:PTAMM::Relocaliser
mse3CamFromWorld	CalibImage.h	/^  SE3<> mse3CamFromWorld;$/;"	m	class:PTAMM::CalibImage
mse3CamFromWorld	Tracker.h	/^  SE3<> mse3CamFromWorld;           \/\/ Camera pose: this is what the tracker updates every frame.$/;"	m	class:PTAMM::Tracker
mse3CfW	ModelsGame.h	/^    SE3<> mse3CfW;                  \/\/ The current camera position$/;"	m	class:PTAMM::ModelsGame
mse3CfW	ShooterGame.h	/^    SE3<> mse3CfW;                                \/\/ The camera postion$/;"	m	class:PTAMM::ShooterGame
mse3CfromW	ARDriver.h	/^    SE3<> mse3CfromW;$/;"	m	class:PTAMM::ARDriver
mse3MfromW	Model3ds.h	/^    SE3<> mse3MfromW;               \/\/ Model's pose and location in the world.$/;"	m	class:PTAMM::Model3DS
mse3ModelOffset	Model3ds.h	/^    SE3<> mse3ModelOffset;          \/\/ Initial rotation of model to line up with the axes$/;"	m	class:PTAMM::Model3DS
mse3StartPos	Tracker.h	/^  SE3<> mse3StartPos;               \/\/ What the camera pose was at the start of the frame.$/;"	m	class:PTAMM::Tracker
mse3ViewerFromWorld	MapViewer.h	/^    SE3<> mse3ViewerFromWorld;$/;"	m	class:PTAMM::MapViewer
mso3IMUInit	Tracker.h	/^  SO3<> mso3IMUInit;$/;"	m	class:PTAMM::Tracker
mso3IMUNow	Tracker.h	/^  SO3<> mso3IMUNow;$/;"	m	class:PTAMM::Tracker
msys	ptam-main.cc	/^System* msys;$/;"	v
mv2CoarsePos	PatchFinder.h	/^  Vector<2> mv2CoarsePos;     \/\/ In the scale of level 0; hence the use of vector rather than ImageRef$/;"	m	class:PTAMM::PatchFinder
mv2SubPixPos	PatchFinder.h	/^  Vector<2> mv2SubPixPos;     \/\/ In the scale of level 0$/;"	m	class:PTAMM::PatchFinder
mv3CentreOfMass	Model3ds.h	/^    Vector<3> mv3CentreOfMass;      \/\/ The model's centre or mass. Model rotates about this$/;"	m	class:PTAMM::Model3DS
mv3DimensionMax	Model3ds.h	/^    Vector<3> mv3DimensionMax;      \/\/ boundary. Used to form the bounding box$/;"	m	class:PTAMM::Model3DS
mv3DimensionMin	Model3ds.h	/^    Vector<3> mv3DimensionMin;      \/\/ The minimum and maximum values for the model's$/;"	m	class:PTAMM::Model3DS
mv3MassCenter	MapViewer.h	/^    Vector<3> mv3MassCenter;$/;"	m	class:PTAMM::MapViewer
mv3Offset	Model3ds.h	/^    Vector<3> mv3Offset;            \/\/ This displacement make the centre of the model's base the origin.$/;"	m	class:PTAMM::Model3DS
mv6CameraVelocity	Tracker.h	/^  Vector<6> mv6CameraVelocity;    \/\/ Motion model$/;"	m	class:PTAMM::Tracker
mv6SBIRot	Tracker.h	/^  Vector<6> mv6SBIRot;$/;"	m	class:PTAMM::Tracker
mvButtons	ModelControls.h	/^    std::vector< MGButton* > mvButtons;       \/\/ The buttons$/;"	m	class:PTAMM::ModelControls
mvCalibImgs	CameraCalibrator.h	/^  std::vector<CalibImage> mvCalibImgs;$/;"	m	class:PTAMM::CameraCalibrator
mvCameras	Bundle.h	/^  std::vector<Camera> mvCameras;$/;"	m	class:PTAMM::Bundle
mvCenter	ATANCamera.h	/^    Vector<2> mvCenter;     \/\/ Pixel projection center$/;"	m	class:PTAMM::ATANCamera
mvCorners	CalibImage.h	/^  std::vector<CVD::ImageRef> mvCorners;$/;"	m	class:PTAMM::CalibImage
mvDecompositions	HomographyInit.h	/^  std::vector<HomographyDecomposition> mvDecompositions;$/;"	m	class:PTAMM::HomographyInit
mvDefaultParams	ATANCamera.cc	/^const Vector<NUMTRACKERCAMPARAMETERS> ATANCamera::mvDefaultParams = makeVector(0.5, 0.75, 0.5, 0.5, 0.1);$/;"	m	class:PTAMM::ATANCamera	file:
mvDefaultParams	ATANCamera.h	/^    static const Vector<NUMTRACKERCAMPARAMETERS> mvDefaultParams;$/;"	m	class:PTAMM::ATANCamera
mvFailureQueueUIDs	MapSerializer.h	/^    std::vector< std::pair< int, int > > mvFailureQueueUIDs;$/;"	m	class:PTAMM::MapSerializer
mvFocal	ATANCamera.h	/^    Vector<2> mvFocal;      \/\/ Pixel focal length$/;"	m	class:PTAMM::ATANCamera
mvGridCorners	CalibImage.h	/^  std::vector<CalibGridCorner> mvGridCorners;$/;"	m	class:PTAMM::CalibImage
mvHomographyInliers	HomographyInit.h	/^  std::vector<HomographyMatch> mvHomographyInliers;$/;"	m	class:PTAMM::HomographyInit
mvImageSize	ATANCamera.h	/^    Vector<2> mvImageSize;  $/;"	m	class:PTAMM::ATANCamera
mvImplaneBR	ATANCamera.h	/^    Vector<2> mvImplaneBR;$/;"	m	class:PTAMM::ATANCamera
mvImplaneTL	ATANCamera.h	/^    Vector<2> mvImplaneTL;   $/;"	m	class:PTAMM::ATANCamera
mvInvFocal	ATANCamera.h	/^    Vector<2> mvInvFocal;   \/\/ Inverse pixel focal length$/;"	m	class:PTAMM::ATANCamera
mvItems	GLWindowMenu.h	/^    std::vector<MenuItem> mvItems;$/;"	m	struct:PTAMM::GLWindowMenu::SubMenu
mvLastCam	ATANCamera.h	/^    Vector<2> mvLastCam;      \/\/ Last z=1 coord$/;"	m	class:PTAMM::ATANCamera
mvLastDistCam	ATANCamera.h	/^    Vector<2> mvLastDistCam;  \/\/ Last distorted z=1 coord$/;"	m	class:PTAMM::ATANCamera
mvLastIm	ATANCamera.h	/^    Vector<2> mvLastIm;       \/\/ Last image\/UFB coord$/;"	m	class:PTAMM::ATANCamera
mvLeftPoseUpdate	GLWindow2.h	/^  TooN::Vector<6> mvLeftPoseUpdate;$/;"	m	class:PTAMM::GLWindow2
mvMCPoseUpdate	GLWindow2.h	/^  TooN::Vector<6> mvMCPoseUpdate;$/;"	m	class:PTAMM::GLWindow2
mvMatches	HomographyInit.h	/^  std::vector<HomographyMatch> mvMatches;$/;"	m	class:PTAMM::HomographyInit
mvMeasLUTs	Bundle.h	/^  std::vector<std::vector<Meas*> > mvMeasLUTs;  \/\/Each camera gets a per-point table of pointers to valid measurements$/;"	m	class:PTAMM::Bundle
mvModels	ModelsGameData.h	/^    std::vector< Model3DS* > mvModels;          \/\/ The list of models$/;"	m	class:PTAMM::ModelsGameData
mvModelsDB	ModelBrowser.h	/^    std::vector< CategoryData > mvModelsDB;        \/\/ holds the data for the list of categories and the associated models$/;"	m	class:PTAMM::ModelBrowser
mvOutlierMeasurementIdx	Bundle.h	/^  std::vector<std::pair<int,int> > mvOutlierMeasurementIdx;  \/\/ p-c pair$/;"	m	class:PTAMM::Bundle
mvPoints	Bundle.h	/^  std::vector<Point> mvPoints;$/;"	m	class:PTAMM::Bundle
mvQueuedCommands	MapMaker.h	/^    std::vector<Command> mvQueuedCommands;$/;"	m	class:PTAMM::MapMaker
mvQueuedCommands	Tracker.h	/^  std::vector<Command> mvQueuedCommands;$/;"	m	class:PTAMM::Tracker
mvUFBLinearCenter	ATANCamera.h	/^    Vector<2> mvUFBLinearCenter;$/;"	m	class:PTAMM::ATANCamera
mvUFBLinearFocal	ATANCamera.h	/^    Vector<2> mvUFBLinearFocal;$/;"	m	class:PTAMM::ATANCamera
mvUFBLinearInvFocal	ATANCamera.h	/^    Vector<2> mvUFBLinearInvFocal;$/;"	m	class:PTAMM::ATANCamera
mvpGLWindowMenus	GLWindow2.h	/^  std::vector<GLWindowMenu*> mvpGLWindowMenus;$/;"	m	class:PTAMM::GLWindow2
mvpMaps	MapMaker.h	/^    std::vector<Map*> &mvpMaps;       \/\/ The vector of maps$/;"	m	class:PTAMM::MapMaker
mvpMaps	MapSerializer.h	/^    std::vector<Map*> & mvpMaps;                            \/\/ The set of maps$/;"	m	class:PTAMM::MapSerializer
mvpMaps	MapViewer.h	/^    std::vector<Map*> & mvpMaps;     \/\/ Reference to all of the maps$/;"	m	class:PTAMM::MapViewer
mvpMaps	Relocaliser.h	/^  std::vector<Map*> & mvpMaps;                    \/\/ Reference to all of the maps$/;"	m	class:PTAMM::Relocaliser
mvpMaps	System.h	/^    std::vector<Map*> mvpMaps;                      \/\/ The set of maps$/;"	m	class:PTAMM::System
mvpMaps	Tracker.h	/^  std::vector<Map*> & mvpMaps;     \/\/ Reference to all of the maps$/;"	m	class:PTAMM::Tracker
nDamage	ShooterGame.h	/^    int nDamage;$/;"	m	struct:PTAMM::Bullet
nIndex	ModelBrowser.h	/^    int nIndex;                               \/\/ The current page$/;"	m	class:PTAMM::Pages
nLevel	KeyFrame.h	/^  int nLevel;   \/\/ Which image level?$/;"	m	struct:PTAMM::Measurement
nMEstimatorInlierCount	MapPoint.h	/^  int nMEstimatorInlierCount;$/;"	m	struct:PTAMM::MapPoint
nMEstimatorOutlierCount	MapPoint.h	/^  int nMEstimatorOutlierCount;$/;"	m	struct:PTAMM::MapPoint
nMeasurements	Bundle.h	/^  int nMeasurements;$/;"	m	struct:PTAMM::Point
nOutliers	Bundle.h	/^  int nOutliers;$/;"	m	struct:PTAMM::Point
nScore	HomographyInit.h	/^  int nScore;$/;"	m	struct:PTAMM::HomographyDecomposition
nSearchLevel	TrackerData.h	/^  int nSearchLevel;$/;"	m	struct:PTAMM::TrackerData
nSourceLevel	MapPoint.h	/^  int nSourceLevel;         \/\/ Pyramid level in source KeyFrame$/;"	m	struct:PTAMM::MapPoint
nStartRow	Bundle.h	/^  int nStartRow;$/;"	m	struct:PTAMM::Camera
nStrength	ShooterGame.h	/^    int nStrength;$/;"	m	struct:PTAMM::Bullet
name	tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:PTAMM::TiXmlAttribute
next	tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:PTAMM::TiXmlAttribute
next	tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:PTAMM::TiXmlNode
node	tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:PTAMM::TiXmlHandle
now_ms	Timing.h	/^now_ms(void)$/;"	f
on_key_down	GLWindow2.cc	/^void GLWindow2::on_key_down(GLWindow&, int k)$/;"	f	class:PTAMM::GLWindow2
on_key_down	GLWindow2.cc	/^void GLWindow2::on_key_down(GLWindow2&, int k)$/;"	f	class:PTAMM::GLWindow2
on_key_down	GLWindow2.cc	/^void GLWindow2::on_key_down(int keycode)$/;"	f	class:PTAMM::GLWindow2
on_mouse_down	GLWindow2.cc	/^void GLWindow2::on_mouse_down(GLWindow2& win, CVD::ImageRef where, int state, int button)$/;"	f	class:PTAMM::GLWindow2
on_mouse_down	GLWindow2.cc	/^void GLWindow2::on_mouse_down(int x, int y)$/;"	f	class:PTAMM::GLWindow2
operator <	Bundle.h	/^  inline bool operator<(const Meas &rhs) const$/;"	f	struct:PTAMM::Meas
operator <	HomographyInit.cc	/^bool operator<(const HomographyDecomposition lhs, const HomographyDecomposition rhs)$/;"	f	namespace:PTAMM
operator <	tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:PTAMM::TiXmlAttribute
operator <<	Utils.h	/^  std::ostream& operator<<(std::ostream& os, const std::vector<T>& v)$/;"	f	namespace:PTAMM
operator <<	tinyxml.cc	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	namespace:PTAMM
operator <<	tinyxml.cc	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	namespace:PTAMM
operator =	KeyFrame.cc	/^KeyFrame& KeyFrame::operator=(const KeyFrame &rhs)$/;"	f	class:PTAMM::KeyFrame
operator =	KeyFrame.cc	/^Level& Level::operator=(const Level &rhs)$/;"	f	class:PTAMM::Level
operator =	tinyxml.cc	/^void TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:PTAMM::TiXmlComment
operator =	tinyxml.cc	/^void TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:PTAMM::TiXmlDeclaration
operator =	tinyxml.cc	/^void TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:PTAMM::TiXmlDocument
operator =	tinyxml.cc	/^void TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:PTAMM::TiXmlElement
operator =	tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { this->node = ref.node; return *this; }$/;"	f	class:PTAMM::TiXmlHandle
operator =	tinyxml.h	/^	void operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); }$/;"	f	class:PTAMM::TiXmlText
operator =	tinyxml.h	/^	void operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); }$/;"	f	class:PTAMM::TiXmlUnknown
operator ==	tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:PTAMM::TiXmlAttribute
operator >	tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:PTAMM::TiXmlAttribute
operator >>	tinyxml.cc	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f	namespace:PTAMM
p	Bundle.h	/^  int p; \/\/ The point  - called i in MVG$/;"	m	struct:PTAMM::Meas
pGame	Map.h	/^    Game * pGame;                                    \/\/ The AR Game for this map$/;"	m	class:PTAMM::Map
pMMData	MapPoint.h	/^  MapMakerData *pMMData;$/;"	m	struct:PTAMM::MapPoint
pPatchSourceKF	MapPoint.h	/^  KeyFrame *pPatchSourceKF; \/\/ The KeyFrame the point was originally made in$/;"	m	struct:PTAMM::MapPoint
pSBI	KeyFrame.h	/^    SmallBlurryImage *pSBI; \/\/ The relocaliser uses this$/;"	m	class:PTAMM::KeyFrame
pTData	MapPoint.h	/^  TrackerData *pTData;$/;"	m	struct:PTAMM::MapPoint
pages	ModelBrowser.h	/^    Pages pages;                              \/\/ Pages object$/;"	m	class:PTAMM::CategoryItem
parent	tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:PTAMM::TiXmlNode
prev	tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:PTAMM::TiXmlAttribute
prev	tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:PTAMM::TiXmlNode
psbuf	ptam-main.cc	/^std::streambuf *psbuf, *coutbackup, *cerrbackup;$/;"	v
qNewQueue	Map.h	/^    std::deque<MapPoint*> qNewQueue;   \/\/ Queue of newly-made map points to re-find in other KeyFrames$/;"	m	class:PTAMM::Map
requestFinish	System.h	/^    bool requestFinish;$/;"	m	class:PTAMM::System
resize	GLWindow2.cc	/^void GLWindow2::resize(int w, int h)$/;"	f	class:PTAMM::GLWindow2
rgb2yuv	yuv2rgb.c	/^int rgb2yuv(int r, int g, int b, int* Y, int* Cb, int* Cr)$/;"	f
row	tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:PTAMM::TiXmlCursor
rtrans_factor	ATANCamera.h	/^  inline double rtrans_factor(double r)$/;"	f	class:PTAMM::ATANCamera
run	MapMaker.cc	/^    void MapMaker::run()$/;"	f	class:PTAMM::MapMaker
run	MapSerializer.cc	/^void MapSerializer::run()$/;"	f	class:PTAMM::MapSerializer
s0	ARDriver.cc	/^        GLfloat s0, t0;         \/\/Texcoord0$/;"	m	struct:PTAMM::DistortionVertex	file:
sCameras	Bundle.h	/^  std::set<int> sCameras; \/\/ Which cameras observe this point?$/;"	m	struct:PTAMM::Point
sCommand	MapMaker.h	/^    struct Command {std::string sCommand; std::string sParams; };$/;"	m	struct:PTAMM::MapMaker::Command
sCommand	Tracker.h	/^  struct Command {std::string sCommand; std::string sParams; };$/;"	m	struct:PTAMM::Tracker::Command
sIconPath	ModelBrowser.h	/^  std::string sIconPath;                      \/\/ Path to the icon (if there is one)$/;"	m	struct:PTAMM::CategoryData
sIconPath	ModelBrowser.h	/^  std::string sIconPath;                      \/\/ Path to the icon (if there is one)$/;"	m	struct:PTAMM::ModelData
sLocation	ModelBrowser.h	/^  std::string sLocation;                      \/\/ Location of the file relative to the model db$/;"	m	struct:PTAMM::ModelData
sMeasurementKFs	MapPoint.h	/^  std::set<KeyFrame*> sMeasurementKFs;   \/\/ Which keyframes has this map point got measurements in?$/;"	m	struct:PTAMM::MapMakerData
sModelFile	ModelBrowser.h	/^  std::string sModelFile;                     \/\/ The model file$/;"	m	struct:PTAMM::ModelData
sName	GLWindowMenu.h	/^    std::string sName;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
sName	ModelBrowser.h	/^    std::string   sName;                           \/\/ Name of the item (it will be a model or a category)$/;"	m	class:PTAMM::BrowserItem
sName	ModelBrowser.h	/^  std::string   sName;                        \/\/ Name of the category$/;"	m	struct:PTAMM::CategoryData
sName	ModelBrowser.h	/^  std::string sName;                          \/\/ Name of the model$/;"	m	struct:PTAMM::ModelData
sNeverRetryKFs	MapPoint.h	/^  std::set<KeyFrame*> sNeverRetryKFs;    \/\/ Which keyframes have measurements failed enough so I should never retry?$/;"	m	struct:PTAMM::MapMakerData
sNextMenu	GLWindowMenu.h	/^    std::string sNextMenu;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
sParam	GLWindowMenu.h	/^    std::string sParam;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
sParams	MapMaker.h	/^    struct Command {std::string sCommand; std::string sParams; };$/;"	m	struct:PTAMM::MapMaker::Command
sParams	Tracker.h	/^  struct Command {std::string sCommand; std::string sParams; };$/;"	m	struct:PTAMM::Tracker::Command
sSaveFile	Map.h	/^    std::string sSaveFile;                           \/\/ where the map was loaded from$/;"	m	class:PTAMM::Map
se3CfW	Bundle.h	/^  SE3<> se3CfW;$/;"	m	struct:PTAMM::Camera
se3CfWNew	Bundle.h	/^  SE3<> se3CfWNew;$/;"	m	struct:PTAMM::Camera
se3CfromW	KeyFrame.h	/^    SE3<> se3CfromW;    \/\/ The coordinate frame of this key-frame as a Camera-From-World transformation$/;"	m	class:PTAMM::KeyFrame
se3SecondFromFirst	HomographyInit.h	/^  SE3<> se3SecondFromFirst;$/;"	m	struct:PTAMM::HomographyDecomposition
sentinel	tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:PTAMM::TiXmlAttributeSet
simpleTextPrint	tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:PTAMM::TiXmlPrinter
size	GLWindow2.cc	/^CVD::ImageRef GLWindow2::size() const$/;"	f	class:PTAMM::GLWindow2
stamp	tinyxmlparser.cc	/^	const char*		stamp;$/;"	m	class:PTAMM::TiXmlParsingData	file:
standalone	tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:PTAMM::TiXmlDeclaration
state	MD5.h	/^  unsigned long int state[4];      \/* state (ABCD) *\/$/;"	m	struct:PTAMM::__anon2
str	tinyxml.h	/^		const char*     str;$/;"	m	struct:PTAMM::TiXmlBase::Entity
strLength	tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:PTAMM::TiXmlBase::Entity
t0	ARDriver.cc	/^        GLfloat s0, t0;         \/\/Texcoord0$/;"	m	struct:PTAMM::DistortionVertex	file:
tab_76309	yuv2rgb.c	/^static long int tab_76309[256];$/;"	v	file:
tabsize	tinyxml.h	/^	int tabsize;$/;"	m	class:PTAMM::TiXmlDocument
tabsize	tinyxmlparser.cc	/^	int				tabsize;$/;"	m	class:PTAMM::TiXmlParsingData	file:
tend	MapMaker.cc	/^struct timeval tstart, tend;$/;"	v	typeref:struct:
timeBegin	timer.h	/^inline void timeBegin()$/;"	f
timeEnd	timer.h	/^inline void timeEnd(std::string NAME)$/;"	f
tstart	MapMaker.cc	/^struct timeval tstart, tend;$/;"	v	typeref:struct:timeval
type	GLWindowMenu.h	/^    MenuItemType type;$/;"	m	struct:PTAMM::GLWindowMenu::MenuItem
type	tinyxml.h	/^	NodeType		type;$/;"	m	class:PTAMM::TiXmlNode
updateIMURotation	Tracker.cc	/^    void Tracker::updateIMURotation(float* q) {$/;"	f	class:PTAMM::Tracker
useMicrosoftBOM	tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:PTAMM::TiXmlDocument
userData	tinyxml.h	/^	void*			userData;$/;"	m	class:PTAMM::TiXmlBase
utf8ByteTable	tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:PTAMM::TiXmlBase
utf8ByteTable	tinyxmlparser.cc	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:PTAMM::TiXmlBase	file:
v2Angles	CalibCornerPatch.h	/^    Vector<2> v2Angles;$/;"	m	struct:PTAMM::CalibCornerPatch::Params
v2CamPlaneFirst	HomographyInit.h	/^  Vector<2> v2CamPlaneFirst;$/;"	m	struct:PTAMM::HomographyMatch
v2CamPlaneSecond	HomographyInit.h	/^  Vector<2> v2CamPlaneSecond;$/;"	m	struct:PTAMM::HomographyMatch
v2Epsilon	Bundle.h	/^  Vector<2> v2Epsilon;$/;"	m	struct:PTAMM::Meas
v2Error	CalibImage.h	/^    Vector<2> v2Error;$/;"	m	struct:PTAMM::CalibImage::ErrorAndJacobians
v2Error_CovScaled	TrackerData.h	/^  Vector<2> v2Error_CovScaled;$/;"	m	struct:PTAMM::TrackerData
v2Found	Bundle.h	/^  Vector<2> v2Found;$/;"	m	struct:PTAMM::Meas
v2Found	TrackerData.h	/^  Vector<2> v2Found;      \/\/ Pixel coords of found patch (L0)$/;"	m	struct:PTAMM::TrackerData
v2ImPlane	TrackerData.h	/^  Vector<2> v2ImPlane;    \/\/ Coords in current cam z=1 plane$/;"	m	struct:PTAMM::TrackerData
v2Image	TrackerData.h	/^  Vector<2> v2Image;      \/\/ Pixel coords in LEVEL0$/;"	m	struct:PTAMM::TrackerData
v2ImplanePos	KeyFrame.h	/^  Vector<2> v2ImplanePos;  \/\/ Position of the measurement, in Z=1 coords$/;"	m	struct:PTAMM::Measurement
v2Pos	CalibCornerPatch.h	/^    Vector<2> v2Pos;$/;"	m	struct:PTAMM::CalibCornerPatch::Params
v2RootPos	KeyFrame.h	/^  Vector<2> v2RootPos;  \/\/ Position of the measurement, REFERED TO PYRAMID LEVEL ZERO$/;"	m	struct:PTAMM::Measurement
v3Cam	Bundle.h	/^  Vector<3> v3Cam;$/;"	m	struct:PTAMM::Meas
v3Cam	TrackerData.h	/^  Vector<3> v3Cam;        \/\/ Coords in current cam frame$/;"	m	struct:PTAMM::TrackerData
v3Center_NC	MapPoint.h	/^  Vector<3> v3Center_NC;             \/\/ Unit vector in Source-KF coords pointing at the patch center$/;"	m	struct:PTAMM::MapPoint
v3Direction	ShooterGame.h	/^    Vector<3> v3Direction;$/;"	m	struct:PTAMM::Bullet
v3EpsilonB	Bundle.h	/^  Vector<3> v3EpsilonB;   \/\/ Accumulator $/;"	m	struct:PTAMM::Point
v3Normal_NC	MapPoint.h	/^  Vector<3> v3Normal_NC;             \/\/ Unit vector in Source-KF coords indicating patch normal$/;"	m	struct:PTAMM::MapPoint
v3OneDownFromCenter_NC	MapPoint.h	/^  Vector<3> v3OneDownFromCenter_NC;  \/\/ Unit vector in Source-KF coords pointing towards one pixel down of the patch center$/;"	m	struct:PTAMM::MapPoint
v3OneRightFromCenter_NC	MapPoint.h	/^  Vector<3> v3OneRightFromCenter_NC; \/\/ Unit vector in Source-KF coords pointing towards one pixel right of the patch center$/;"	m	struct:PTAMM::MapPoint
v3PixelDown_W	MapPoint.h	/^  Vector<3> v3PixelDown_W;           \/\/ 3-Vector in World coords corresponding to a one-pixel move down the source image$/;"	m	struct:PTAMM::MapPoint
v3PixelRight_W	MapPoint.h	/^  Vector<3> v3PixelRight_W;          \/\/ 3-Vector in World coords corresponding to a one-pixel move right the source image$/;"	m	struct:PTAMM::MapPoint
v3Pos	Bundle.h	/^  Vector<3> v3Pos;$/;"	m	struct:PTAMM::Point
v3PosNew	Bundle.h	/^  Vector<3> v3PosNew;$/;"	m	struct:PTAMM::Point
v3Position	ShooterGame.h	/^    Vector<3> v3Position;$/;"	m	struct:PTAMM::Bullet
v3Position	ShooterGameTarget.h	/^    TooN::Vector<3> v3Position;               \/\/ Its location in the world$/;"	m	class:PTAMM::ShooterGameTarget
v3Rotation	ModelBrowser.h	/^  TooN::Vector<3> v3Rotation;                 \/\/ initial rotation of the model to make it plane aligned.$/;"	m	struct:PTAMM::ModelData
v3Tp	HomographyInit.h	/^  Vector<3> v3Tp;$/;"	m	struct:PTAMM::HomographyDecomposition
v3WorldPos	MapPoint.h	/^  Vector<3> v3WorldPos;$/;"	m	struct:PTAMM::MapPoint
v3n	HomographyInit.h	/^  Vector<3> v3n;$/;"	m	struct:PTAMM::HomographyDecomposition
v4ActiveColor	MGButton.h	/^    Vector<4> v4ActiveColor;$/;"	m	class:PTAMM::MGButton
v4BackColor	MGButton.h	/^    Vector<4> v4BackColor;$/;"	m	class:PTAMM::MGButton
v4BorderColor	MGButton.h	/^    Vector<4> v4BorderColor;                              \/\/ Colours for the button$/;"	m	class:PTAMM::MGButton
v4FontColor	MGButton.h	/^    Vector<4> v4FontColor;$/;"	m	class:PTAMM::MGButton
v6EpsilonA	Bundle.h	/^  Vector<6> v6EpsilonA;   \/\/ Accumulator$/;"	m	struct:PTAMM::Camera
vCandidates	KeyFrame.h	/^  std::vector<Candidate> vCandidates;   \/\/ Potential locations of new map points$/;"	m	struct:PTAMM::Level
vCornerRowLUT	KeyFrame.h	/^  std::vector<int> vCornerRowLUT;          \/\/ Row-index into the FAST corners, speeds up access$/;"	m	struct:PTAMM::Level
vCorners	KeyFrame.h	/^  std::vector<CVD::ImageRef> vCorners;     \/\/ All FAST corners on this level$/;"	m	struct:PTAMM::Level
vFailureQueue	Map.h	/^    std::vector<std::pair<KeyFrame*, MapPoint*> > vFailureQueue; \/\/ Queue of failed observations to re-find$/;"	m	class:PTAMM::Map
vImplaneCorners	KeyFrame.h	/^  std::vector<Vector<2> > vImplaneCorners; \/\/ Corner points un-projected into z=1-plane coordinates$/;"	m	struct:PTAMM::Level
vItems	ModelBrowser.h	/^    std::vector< BrowserItem* > vItems;            \/\/ The list of browser items$/;"	m	class:PTAMM::Page
vMaxCorners	KeyFrame.h	/^  std::vector<CVD::ImageRef> vMaxCorners;  \/\/ The maximal FAST corners$/;"	m	struct:PTAMM::Level
vModels	ModelBrowser.h	/^  std::vector< ModelData > vModels;           \/\/ The models in a category$/;"	m	struct:PTAMM::CategoryData
vOffDiagonalScript	Bundle.h	/^  std::vector<OffDiagScriptEntry> vOffDiagonalScript; \/\/ A record of all camera-camera pairs observing this point$/;"	m	struct:PTAMM::Point
vPages	ModelBrowser.h	/^    std::vector< Page* > vPages;              \/\/ A list of page objects$/;"	m	class:PTAMM::Pages
val	CalibImage.h	/^    int val;$/;"	m	struct:PTAMM::CalibGridCorner::NeighborState
value	tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:PTAMM::TiXmlNode
value	tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:PTAMM::TiXmlAttribute
version	tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:PTAMM::TiXmlDeclaration
vpKeyFrameQueue	Map.h	/^    std::vector<KeyFrame*> vpKeyFrameQueue;  \/\/ Queue of keyframes from the tracker waiting to be processed$/;"	m	class:PTAMM::Map
vpKeyFrames	Map.h	/^    std::vector<KeyFrame*> vpKeyFrames;$/;"	m	class:PTAMM::Map
vpPoints	Map.h	/^    std::vector<MapPoint*> vpPoints;$/;"	m	class:PTAMM::Map
vpPointsTrash	Map.h	/^    std::vector<MapPoint*> vpPointsTrash;$/;"	m	class:PTAMM::Map
x	ARDriver.cc	/^        GLfloat x, y;        \/\/Vertex$/;"	m	struct:PTAMM::DistortionVertex	file:
y	ARDriver.cc	/^        GLfloat x, y;        \/\/Vertex$/;"	m	struct:PTAMM::DistortionVertex	file:
yuv2rgb	yuv2rgb.c	/^int yuv2rgb(int Y, int Cb, int Cr, int* r, int* g, int* b)$/;"	f
yuv420_to_rgb24_1	yuv2rgb.c	/^void yuv420_to_rgb24_1(unsigned char* yuv420, unsigned char* rgb, int width, int height)$/;"	f
yuv420_to_rgb24_2	yuv2rgb.c	/^void yuv420_to_rgb24_2(unsigned char *yuv420, unsigned char *rgb24, int width, int height)$/;"	f
yuv420_to_rgb24_3	yuv2rgb.c	/^void yuv420_to_rgb24_3(unsigned char* yuv, unsigned char* rgb, int width, int height)$/;"	f
yuv420p_to_rgb24	yuv2rgb.c	/^void yuv420p_to_rgb24(unsigned char* yuvbuffer,unsigned char* rgbbuffer, int width,int height)$/;"	f
yuv420sp_to_yuv420p	yuv2rgb.c	/^void yuv420sp_to_yuv420p(unsigned char* yuv420sp, unsigned char* yuv420p, int width, int height)$/;"	f
yuv422_to_rgb24_1	yuv2rgb.c	/^void yuv422_to_rgb24_1(unsigned char* yuv422, unsigned char* rgb, int width, int height)$/;"	f
yuv422p_to_rgb24	yuv2rgb.c	/^void yuv422p_to_rgb24(unsigned char* yuv422p, unsigned char* rgb, int width, int height)$/;"	f
yuv422sp_to_rgb24	yuv2rgb.c	/^void yuv422sp_to_rgb24(unsigned char* yuv422sp, unsigned char* rgb, int width, int height)$/;"	f
yuv422sp_to_yuv422p	yuv2rgb.c	/^void yuv422sp_to_yuv422p(unsigned char* yuv422sp, unsigned char* yuv422p, int width, int height)$/;"	f
yuv_to_rgb24	yuv2rgb.c	/^int yuv_to_rgb24(YUV_TYPE type, unsigned char* yuvbuffer,unsigned char* rgbbuffer, int width, int height)$/;"	f
yuv_to_rgb24_1	yuv2rgb.c	/^void yuv_to_rgb24_1(unsigned char* yuv, unsigned char* rgb, int width, int height, YUV_TYPE type)$/;"	f
~BrowserItem	ModelBrowser.h	/^    virtual ~BrowserItem() {};$/;"	f	class:PTAMM::BrowserItem
~CategoryItem	ModelBrowser.h	/^    ~CategoryItem() {};$/;"	f	class:PTAMM::CategoryItem
~GLWindowMenu	GLWindowMenu.cc	/^GLWindowMenu::~GLWindowMenu()$/;"	f	class:PTAMM::GLWindowMenu
~Game	Game.h	/^    virtual ~Game() {};$/;"	f	class:PTAMM::Game
~KeyFrame	KeyFrame.cc	/^KeyFrame::~KeyFrame()$/;"	f	class:PTAMM::KeyFrame
~MD5Wrapper	MD5Wrapper.cc	/^MD5Wrapper::~MD5Wrapper()$/;"	f	class:PTAMM::MD5Wrapper
~MGButton	MGButton.h	/^    ~MGButton() {}$/;"	f	class:PTAMM::MGButton
~Map	Map.cc	/^Map::~Map()$/;"	f	class:PTAMM::Map
~MapLockManager	MapLockManager.h	/^    ~MapLockManager() {}$/;"	f	class:PTAMM::MapLockManager
~MapMaker	MapMaker.cc	/^    MapMaker::~MapMaker()$/;"	f	class:PTAMM::MapMaker
~MapSerializer	MapSerializer.cc	/^MapSerializer::~MapSerializer()$/;"	f	class:PTAMM::MapSerializer
~Model3DS	Model3ds.cc	/^Model3DS::~Model3DS()$/;"	f	class:PTAMM::Model3DS
~ModelBrowser	ModelBrowser.cc	/^ModelBrowser::~ModelBrowser()$/;"	f	class:PTAMM::ModelBrowser
~ModelControls	ModelControls.cc	/^ModelControls::~ModelControls()$/;"	f	class:PTAMM::ModelControls
~ModelItem	ModelBrowser.h	/^    ~ModelItem() {};$/;"	f	class:PTAMM::ModelItem
~ModelsGame	ModelsGame.cc	/^ModelsGame::~ModelsGame()$/;"	f	class:PTAMM::ModelsGame
~ModelsGameData	ModelsGameData.cc	/^ModelsGameData::~ModelsGameData()$/;"	f	class:PTAMM::ModelsGameData
~Page	ModelBrowser.cc	/^Page::~Page()$/;"	f	class:PTAMM::Page
~Pages	ModelBrowser.cc	/^Pages::~Pages()$/;"	f	class:PTAMM::Pages
~ShooterGame	ShooterGame.cc	/^ShooterGame::~ShooterGame()$/;"	f	class:PTAMM::ShooterGame
~ShooterGameTarget	ShooterGameTarget.h	/^    ~ShooterGameTarget() {};$/;"	f	class:PTAMM::ShooterGameTarget
~SmallBlurryImage	SmallBlurryImage.h	/^  ~SmallBlurryImage() {}$/;"	f	class:PTAMM::SmallBlurryImage
~System	System.cc	/^System::~System()$/;"	f	class:PTAMM::System
~TiXmlAttributeSet	tinyxml.cc	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:PTAMM::TiXmlAttributeSet
~TiXmlBase	tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:PTAMM::TiXmlBase
~TiXmlComment	tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:PTAMM::TiXmlComment
~TiXmlDeclaration	tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:PTAMM::TiXmlDeclaration
~TiXmlDocument	tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:PTAMM::TiXmlDocument
~TiXmlElement	tinyxml.cc	/^TiXmlElement::~TiXmlElement()$/;"	f	class:PTAMM::TiXmlElement
~TiXmlNode	tinyxml.cc	/^TiXmlNode::~TiXmlNode()$/;"	f	class:PTAMM::TiXmlNode
~TiXmlText	tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:PTAMM::TiXmlText
~TiXmlUnknown	tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:PTAMM::TiXmlUnknown
~TiXmlVisitor	tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:PTAMM::TiXmlVisitor
